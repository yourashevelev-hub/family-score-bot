import asyncio
import aiosqlite
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from calendar import monthcalendar, month_name

# ============ –ù–ê–°–¢–†–û–ô–ö–ò ============
API_TOKEN = '8278829733:AAFJGwqcurBtrGLqq3szbFcFd9i09LHgHag'
ADMINS = [434755668, 819582279]  # –ó–∞–º–µ–Ω–∏ –Ω–∞ –≤–∞—à–∏ user_id

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# ============ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î ============
async def init_db():
    async with aiosqlite.connect('household.db') as db:
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                name TEXT,
                score INTEGER DEFAULT 0,
                level INTEGER DEFAULT 1,
                last_level_up TEXT
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS tasks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE,
                points INTEGER,
                is_team BOOLEAN DEFAULT 0,
                category TEXT DEFAULT "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS completed_tasks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                task_id INTEGER,
                completed_at TEXT,
                is_team BOOLEAN DEFAULT 0,
                FOREIGN KEY(user_id) REFERENCES users(user_id),
                FOREIGN KEY(task_id) REFERENCES tasks(id)
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS achievements (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE,
                description TEXT,
                icon TEXT,
                points INTEGER DEFAULT 0,
                title TEXT,
                type TEXT,
                is_hidden BOOLEAN DEFAULT 0
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS user_achievements (
                user_id INTEGER,
                achievement_id INTEGER,
                unlocked_at TEXT,
                FOREIGN KEY(user_id) REFERENCES users(user_id),
                FOREIGN KEY(achievement_id) REFERENCES achievements(id),
                UNIQUE(user_id, achievement_id)
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS user_titles (
                user_id INTEGER PRIMARY KEY,
                title TEXT DEFAULT "–ù–æ–≤–∏—á–æ–∫ –ë—ã—Ç–∞",
                FOREIGN KEY(user_id) REFERENCES users(user_id)
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS seasons (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE,
                start_date TEXT,
                end_date TEXT,
                is_active BOOLEAN DEFAULT 0
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS user_season_archive (
                user_id INTEGER,
                season_id INTEGER,
                final_score INTEGER,
                final_level INTEGER,
                rank_in_season INTEGER,
                FOREIGN KEY(user_id) REFERENCES users(user_id),
                FOREIGN KEY(season_id) REFERENCES seasons(id),
                UNIQUE(user_id, season_id)
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS completed_tasks_archive (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                task_name TEXT,
                points INTEGER,
                completed_at TEXT,
                season_id INTEGER,
                FOREIGN KEY(user_id) REFERENCES users(user_id),
                FOREIGN KEY(season_id) REFERENCES seasons(id)
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS daily_actions (
                user_id INTEGER,
                date TEXT,
                dishwasher_used BOOLEAN DEFAULT 0,
                trash_taken_out BOOLEAN DEFAULT 0,
                dishes_washed BOOLEAN DEFAULT 0,
                PRIMARY KEY (user_id, date),
                FOREIGN KEY(user_id) REFERENCES users(user_id)
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS quests (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                description TEXT,
                task_keyword TEXT,
                bonus_points INTEGER,
                is_active BOOLEAN DEFAULT 0,
                assigned_to INTEGER,
                assigned_at TEXT,
                completed_at TEXT
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS weekly_goals (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                description TEXT,
                target_count INTEGER,
                created_at TEXT,
                achieved_at TEXT DEFAULT NULL
            )
        ''')

        # ============ –î–û–ë–ê–í–õ–Ø–ï–ú –í–°–ï –ó–ê–î–ê–ù–ò–Ø ============
        your_tasks = [
            # üçΩ –ö–£–•–ù–Ø
            ("–ü–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É –ø–æ—Å–ª–µ —É–∂–∏–Ω–∞", 3, 0, "üçΩ –ö–£–•–ù–Ø"),
            ("–ü–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É –ø–æ—Å–ª–µ –æ–±–µ–¥–∞ –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞–∫–∞", 2, 0, "üçΩ –ö–£–•–ù–Ø"),
            ("–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —É–∂–∏–Ω –Ω–∞ –¥–≤–æ–∏—Ö (—Å —Å–µ—Ä–≤–∏—Ä–æ–≤–∫–æ–π –∏ —É–±–æ—Ä–∫–æ–π)", 5, 1, "üçΩ –ö–£–•–ù–Ø"),
            ("–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–≤—Ç—Ä–∞–∫ (–≥–æ—Ä—è—á–∏–π, –Ω–∞ –¥–≤–æ–∏—Ö)", 3, 1, "üçΩ –ö–£–•–ù–Ø"),
            ("–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –æ–±–µ–¥ —Å —Å–æ–±–æ–π –Ω–∞ —Ä–∞–±–æ—Ç—É", 3, 0, "üçΩ –ö–£–•–ù–Ø"),
            ("–°—Ö–æ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ (–ø–æ —Å–ø–∏—Å–∫—É, 10+ –ø–æ–∑–∏—Ü–∏–π)", 4, 1, "üçΩ –ö–£–•–ù–Ø"),
            ("–†–∞–∑–≥—Ä—É–∑–∏—Ç—å/–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—É–¥–æ–º–æ–µ—á–Ω—É—é –º–∞—à–∏–Ω—É –ø–æ–ª–Ω–æ—Å—Ç—å—é", 2, 0, "üçΩ –ö–£–•–ù–Ø"),
            ("–í—ã–Ω–µ—Å—Ç–∏ –º—É—Å–æ—Ä + –∑–∞–º–µ–Ω–∏—Ç—å –º–µ—à–∫–∏", 2, 0, "üçΩ –ö–£–•–ù–Ø"),
            ("–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –∫—É—Ö–æ–Ω–Ω—ã–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ (—Å—Ç–æ–ª, –ø–ª–∏—Ç–∞, —Ñ–∞—Ä—Ç—É–∫)", 2, 0, "üçΩ –ö–£–•–ù–Ø"),
            ("–û—á–∏—Å—Ç–∏—Ç—å —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –≤–Ω—É—Ç—Ä–∏ (–º—ã—Ç—å—ë –ø–æ–ª–æ–∫, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤)", 5, 1, "üçΩ –ö–£–•–ù–Ø"),
            ("–†–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å –∏ –ø–æ–º—ã—Ç—å –º–æ—Ä–æ–∑–∏–ª—å–Ω—É—é –∫–∞–º–µ—Ä—É", 8, 1, "üçΩ –ö–£–•–ù–Ø"),
            ("–°–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é + —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫", 3, 1, "üçΩ –ö–£–•–ù–Ø"),
            ("–ó–∞–º–∞—Ä–∏–Ω–æ–≤–∞—Ç—å/–∑–∞–≥–æ—Ç–æ–≤–∏—Ç—å –µ–¥—É –≤–ø—Ä–æ–∫ (–Ω–∞ 2+ –¥–Ω—è)", 4, 1, "üçΩ –ö–£–•–ù–Ø"),
            ("–ü–æ–º—ã—Ç—å –¥—É—Ö–æ–≤–∫—É/–º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫—É –≤–Ω—É—Ç—Ä–∏", 6, 1, "üçΩ –ö–£–•–ù–Ø"),
            ("–£–±—Ä–∞—Ç—å –∫–ª–∞–¥–æ–≤–∫—É/—à–∫–∞—Ñ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ, –ø–æ—Ä—è–¥–æ–∫)", 5, 1, "üçΩ –ö–£–•–ù–Ø"),

            # üßπ –£–ë–û–†–ö–ê –í –ö–í–ê–†–¢–ò–†–ï
            ("–ü—Ä–æ–ø—ã–ª–µ—Å–æ—Å–∏—Ç—å –≤—Å—é –∫–≤–∞—Ä—Ç–∏—Ä—É (–≤–∫–ª—é—á–∞—è –ø–æ–¥ –º–µ–±–µ–ª—å—é –∏ —É–≥–ª—ã)", 4, 0, "üßπ –£–ë–û–†–ö–ê"),
            ("–ü–æ–º—ã—Ç—å –ø–æ–ª—ã –≤–æ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö", 5, 1, "üßπ –£–ë–û–†–ö–ê"),
            ("–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –ø—ã–ª—å –ø–æ –≤—Å–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ (–≤–∫–ª—é—á–∞—è —Ç–µ—Ö–Ω–∏–∫—É, –∫–∞—Ä—Ç–∏–Ω—ã, –ø–æ–ª–∫–∏)", 4, 1, "üßπ –£–ë–û–†–ö–ê"),
            ("–ü–æ–º—ã—Ç—å –≤–∞–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É (–≤–∞–Ω–Ω–∞, —Ä–∞–∫–æ–≤–∏–Ω–∞, –∑–µ—Ä–∫–∞–ª–æ, –ø–æ–ª, –º—É—Å–æ—Ä–∫–∞)", 5, 1, "üßπ –£–ë–û–†–ö–ê"),
            ("–ü–æ–º—ã—Ç—å —Ç—É–∞–ª–µ—Ç (—É–Ω–∏—Ç–∞–∑, –ø–æ–ª, –±–∞—á–æ–∫, –¥–µ—Ä–∂–∞—Ç–µ–ª—å –±—É–º–∞–≥–∏)", 3, 0, "üßπ –£–ë–û–†–ö–ê"),
            ("–ü–æ–º—ã—Ç—å –∑–µ—Ä–∫–∞–ª–∞ –≤ –¥–æ–º–µ (–±–µ–∑ —Ä–∞–∑–≤–æ–¥–æ–≤)", 3, 0, "üßπ –£–ë–û–†–ö–ê"),
            ("–ü–æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–≤—Ä—ã/–∫–æ–≤—Ä–∏–∫–∏ (–ø—ã–ª–µ—Å–æ—Å + –ø—è—Ç–Ω–æ–≤—ã–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)", 4, 1, "üßπ –£–ë–û–†–ö–ê"),
            ("–ü–æ–º—ã—Ç—å –æ–∫–Ω–∞ (1 –æ–∫–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞)", 4, 1, "üßπ –£–ë–û–†–ö–ê"),
            ("–ü–æ–º—ã—Ç—å –±–∞—Ç–∞—Ä–µ–∏/—Ä–∞–¥–∏–∞—Ç–æ—Ä—ã –æ—Ç –ø—ã–ª–∏", 3, 0, "üßπ –£–ë–û–†–ö–ê"),
            ("–£–±—Ä–∞—Ç—å –¥–µ—Ç—Å–∫—É—é/–∫–∞–±–∏–Ω–µ—Ç/–∫–ª–∞–¥–æ–≤–∫—É (–ø–æ–ª–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤–µ—â–µ–π)", 6, 1, "üßπ –£–ë–û–†–ö–ê"),
            ("–í—ã–Ω–µ—Å—Ç–∏ –∫—Ä—É–ø–Ω—ã–π/—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –º—É—Å–æ—Ä (–≤—ã–∑–≤–∞—Ç—å —Å–ª—É–∂–±—É –∏–ª–∏ –æ—Ç–≤–µ–∑—Ç–∏)", 6, 1, "üßπ –£–ë–û–†–ö–ê"),
            ("–ü–æ–º—ã—Ç—å –≤—Ö–æ–¥–Ω—É—é –¥–≤–µ—Ä—å –∏ –¥–≤–µ—Ä–Ω—ã–µ —Ä—É—á–∫–∏ –ø–æ –≤—Å–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ", 3, 0, "üßπ –£–ë–û–†–ö–ê"),
            ("–ü–æ—á–∏—Å—Ç–∏—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à—ë—Ç–∫–∏/–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä (–≤–Ω–µ—à–Ω—è—è –æ—á–∏—Å—Ç–∫–∞)", 4, 0, "üßπ –£–ë–û–†–ö–ê"),
            ("–ü–æ–º—ã—Ç—å –ø–ª–∏–Ω—Ç—É—Å–∞ –ø–æ –≤—Å–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ", 4, 1, "üßπ –£–ë–û–†–ö–ê"),
            ("–°–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç–µ–ª—å–Ω–æ–µ –±–µ–ª—å—ë –Ω–∞ –≤—Å–µ—Ö –∫—Ä–æ–≤–∞—Ç—è—Ö", 4, 1, "üßπ –£–ë–û–†–ö–ê"),

            # üß∫ –°–¢–ò–†–ö–ê, –ì–õ–ê–ñ–ö–ê, –®–ö–ê–§–´
            ("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∏—Ä–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É (–ø–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞, —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π)", 2, 0, "üß∫ –°–¢–ò–†–ö–ê"),
            ("–†–∞–∑–≤–µ—Å–∏—Ç—å/—Ä–∞–∑–ª–æ–∂–∏—Ç—å –ø–æ—Å—É—à–µ–Ω–Ω–æ–µ –±–µ–ª—å—ë –∞–∫–∫—É—Ä–∞—Ç–Ω–æ", 3, 0, "üß∫ –°–¢–ò–†–ö–ê"),
            ("–ü–æ–≥–ª–∞–¥–∏—Ç—å 10+ –≤–µ—â–µ–π", 4, 0, "üß∫ –°–¢–ò–†–ö–ê"),
            ("–ü–µ—Ä–µ–±—Ä–∞—Ç—å —à–∫–∞—Ñ (—Å–µ–∑–æ–Ω–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è, —É–±—Ä–∞—Ç—å –Ω–µ–Ω—É–∂–Ω–æ–µ)", 8, 1, "üß∫ –°–¢–ò–†–ö–ê"),
            ("–ó–∞—à–∏—Ç—å –¥—ã—Ä–∫—É/–ø—Ä–∏—à–∏—Ç—å –ø—É–≥–æ–≤–∏—Ü—É –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ", 3, 0, "üß∫ –°–¢–ò–†–ö–ê"),
            ("–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–µ—â–µ–π (—è—â–∏–∫–∏, –∫–æ—Ä–æ–±–∫–∏, –ø–æ–¥–ø–∏—Å–∏)", 6, 1, "üß∫ –°–¢–ò–†–ö–ê"),
            ("–ü–æ—á–∏—Å—Ç–∏—Ç—å –æ–±—É–≤—å (5+ –ø–∞—Ä, –≤–∫–ª—é—á–∞—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –æ–±—Ä–∞–±–æ—Ç–∫—É)", 4, 1, "üß∫ –°–¢–ò–†–ö–ê"),
            ("–û—Ç–Ω–µ—Å—Ç–∏/–∑–∞–±—Ä–∞—Ç—å –≤–µ—â–∏ –≤ —Ö–∏–º—á–∏—Å—Ç–∫—É", 3, 0, "üß∫ –°–¢–ò–†–ö–ê"),
            ("–°–æ–±—Ä–∞—Ç—å –∏ –æ—Ç–≤–µ–∑—Ç–∏/–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É (–æ–¥–µ–∂–¥—É, –∫–Ω–∏–≥–∏ –∏ —Ç.–ø.)", 4, 1, "üß∫ –°–¢–ò–†–ö–ê"),

            # üõí –ê–î–ú–ò–ù–ò–°–¢–†–ê–¶–ò–Ø, –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï, –ë–´–¢
            ("–û–ø–ª–∞—Ç–∏—Ç—å –≤—Å–µ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –≤ —Å—Ä–æ–∫", 3, 0, "üõí –ë–´–¢"),
            ("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∏ —Å—Ö–æ–¥–∏—Ç—å –Ω–∞ –ø—Ä–∏—ë–º (–≤—Ä–∞—á, –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä, –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å –∏ —Ç.–ø.)", 2, 0, "üõí –ë–´–¢"),
            ("–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∏—Ö–æ–¥ –≥–æ—Å—Ç–µ–π (—É–±–æ—Ä–∫–∞, –µ–¥–∞, –Ω–∞–ø–∏—Ç–∫–∏, –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)", 6, 1, "üõí –ë–´–¢"),
            ("–°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—É—Å–∫/–≤—ã—Ö–æ–¥–Ω—ã–µ (–º–∞—Ä—à—Ä—É—Ç, –±—Ä–æ–Ω—å, —Å–ø–∏—Å–æ–∫ –≤–µ—â–µ–π)", 7, 1, "üõí –ë–´–¢"),
            ("–ö—É–ø–∏—Ç—å, —É–ø–∞–∫–æ–≤–∞—Ç—å –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ (–∫ –î–†, –ø—Ä–∞–∑–¥–Ω–∏–∫—É)", 5, 1, "üõí –ë–´–¢"),
            ("–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å–µ–º–µ–π–Ω—ã–π –≤–µ—á–µ—Ä (—Ñ–∏–ª—å–º, –Ω–∞—Å—Ç–æ–ª–∫–∞, —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É–∂–∏–Ω)", 5, 1, "üõí –ë–´–¢"),
            ("–°–æ—Å—Ç–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–ª –ø–æ –¥–æ–º—É –Ω–∞ –Ω–µ–¥–µ–ª—é", 3, 1, "üõí –ë–´–¢"),
            ("–†–∞–∑–æ–±—Ä–∞—Ç—å –ø–æ—á—Ç—É/–±—É–º–∞–≥–∏/–¥–æ–∫—É–º–µ–Ω—Ç—ã (–ø–æ–¥–ø–∏—Å–∫–∏, —Å—á–µ—Ç–∞, –∞—Ä—Ö–∏–≤)", 5, 0, "üõí –ë–´–¢"),
            ("–û–±–Ω–æ–≤–∏—Ç—å –∞–ø—Ç–µ—á–∫—É (–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ä–æ–∫–∏, –¥–æ–∫—É–ø–∏—Ç—å, –ø–æ–¥–ø–∏—Å–∞—Ç—å)", 4, 1, "üõí –ë–´–¢"),
            ("–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ (—Å—Ç–∏—Ä–∞–ª–∫–∞, –ø—ã–ª–µ—Å–æ—Å, –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä)", 5, 1, "üõí –ë–´–¢"),
            ("–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ —Å–µ–º–µ–π–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ + —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤", 3, 1, "üõí –ë–´–¢"),

            # üê∂ –ü–ò–¢–û–ú–¶–´
            ("–í—ã–≥—É–ª—è—Ç—å —Å–æ–±–∞–∫—É (30+ –º–∏–Ω—É—Ç, –∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞)", 3, 0, "üê∂ –ü–ò–¢–û–ú–¶–´"),
            ("–ù–∞–∫–æ—Ä–º–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ + –ø–æ–º—ã—Ç—å –º–∏—Å–∫–∏ + —É–±—Ä–∞—Ç—å –ª–æ—Ç–æ–∫/–∫–ª–µ—Ç–∫—É", 2, 0, "üê∂ –ü–ò–¢–û–ú–¶–´"),
            ("–ü–æ—á–∏—Å—Ç–∏—Ç—å –∞–∫–≤–∞—Ä–∏—É–º/–∫–ª–µ—Ç–∫—É/—Ç–µ—Ä—Ä–∞—Ä–∏—É–º", 5, 0, "üê∂ –ü–ò–¢–û–ú–¶–´"),
            ("–°—Ö–æ–¥–∏—Ç—å —Å –ø–∏—Ç–æ–º—Ü–µ–º –∫ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä—É", 5, 1, "üê∂ –ü–ò–¢–û–ú–¶–´"),
            ("–ö—É–ø–∏—Ç—å –∫–æ—Ä–º/–Ω–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å/–∏–≥—Ä—É—à–∫–∏ –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞", 3, 0, "üê∂ –ü–ò–¢–û–ú–¶–´"),
            ("–ü–æ—Å—Ç—Ä–∏—á—å –∫–æ–≥—Ç–∏/–ø–æ—á–µ—Å–∞—Ç—å/–ø–æ—á–∏—Å—Ç–∏—Ç—å —à–µ—Ä—Å—Ç—å –ø–∏—Ç–æ–º—Ü—É", 4, 0, "üê∂ –ü–ò–¢–û–ú–¶–´"),
            ("–û–±—É—á–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ/—Ç—Ä—é–∫—É", 6, 1, "üê∂ –ü–ò–¢–û–ú–¶–´"),
            ("–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—é —Å –ø–∏—Ç–æ–º—Ü–µ–º", 4, 1, "üê∂ –ü–ò–¢–û–ú–¶–´"),
            ("–°–¥–µ–ª–∞—Ç—å —É–±–æ—Ä–∫—É –≤ –∑–æ–Ω–µ –ø–∏—Ç–æ–º—Ü–∞ (–ª–µ–∂–∞–Ω–∫–∞, –∏–≥—Ä—É—à–∫–∏, —É–≥–æ–ª–æ–∫)", 3, 0, "üê∂ –ü–ò–¢–û–ú–¶–´"),
            ("–ü—Ä–∏–¥—É–º–∞—Ç—å –∏ —Å–¥–µ–ª–∞—Ç—å –∏–≥—Ä—É—à–∫—É –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞ —Å–≤–æ–∏–º–∏ —Ä—É–∫–∞–º–∏", 5, 1, "üê∂ –ü–ò–¢–û–ú–¶–´"),
        ]

        for name, points, is_team, category in your_tasks:
            await db.execute('INSERT OR IGNORE INTO tasks (name, points, is_team, category) VALUES (?, ?, ?, ?)', (name, points, is_team, category))

        # ============ –î–û–ë–ê–í–õ–Ø–ï–ú –í–°–ï –ê–ß–ò–í–ö–ò ============
        achievements_data = [
            # ü¶∏‚Äç‚ôÇÔ∏è –ì–ï–†–û–ò–ß–ï–°–ö–ò–ï
            ("–ú–∞—Å—Ç–µ—Ä –ü–æ—Å—É–¥–æ–º–æ–π–∫–∏", "–ó–∞–≥—Ä—É–∑–∏–ª/—Ä–∞–∑–≥—Ä—É–∑–∏–ª –ø–æ—Å—É–¥–æ–º–æ–π–∫—É 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥", "ü¶∏‚Äç‚ôÇÔ∏è", 5, "–†—ã—Ü–∞—Ä—å –ß–∏—Å—Ç—ã—Ö –¢–∞—Ä–µ–ª–æ–∫", "heroic", 0),
            ("–¢–µ–Ω—å –£–±–æ—Ä–∫–∏", "–£–±—Ä–∞–ª –≤—Å—é –∫–≤–∞—Ä—Ç–∏—Ä—É, –ø–æ–∫–∞ –ø–∞—Ä—Ç–Ω—ë—Ä —Å–ø–∞–ª", "ü•∑", 8, "–ù–∏–Ω–¥–∑—è –ß–∏—Å—Ç–æ—Ç—ã", "heroic", 0),
            ("–ì–ª–∞–¥–∏–ª—å–Ω—ã–π –î—Ä–∞–∫–æ–Ω", "–ü–æ–≥–ª–∞–¥–∏–ª 20 –≤–µ—â–µ–π –∑–∞ –æ–¥–∏–Ω –ø—Ä–∏—Å–µ—Å—Ç", "üêâ", 7, "–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –£—Ç—é–≥–∞", "heroic", 0),
            ("–®–µ—Ñ-–Ω–µ–≤–∏–¥–∏–º–∫–∞", "–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª —É–∂–∏–Ω, –Ω–∞–∫—Ä—ã–ª, —É–≥–æ—Å—Ç–∏–ª, –∏ —É–±—Ä–∞–ª –≤—Å—ë, –ø–æ–∫–∞ –ø–∞—Ä—Ç–Ω—ë—Ä —Å–º–æ—Ç—Ä–µ–ª —Å–µ—Ä–∏–∞–ª", "üëª", 10, "–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–π –ü—Ä–∏–∑—Ä–∞–∫", "heroic", 0),
            ("–ú—É—Å–æ—Ä–Ω—ã–π –ú–∞–≥–Ω–∞—Ç", "–í—ã–Ω–µ—Å –º—É—Å–æ—Ä 5 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", "üóëÔ∏è", 5, "–ö–æ—Ä–æ–ª—å –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", "heroic", 0),
            ("–ú–∞—Å—Ç–µ—Ä –ü–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤", "–£–±–µ–¥–∏–ª –ø–∞—Ä—Ç–Ω—ë—Ä–∞ —É–±—Ä–∞—Ç—å —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É –ë–ï–ó –∫—Ä–∏–∫–∞", "üó£Ô∏è", 6, "–î–∏–ø–ª–æ–º–∞—Ç –ì—Ä—è–∑–∏", "heroic", 0),

            # üêâ –õ–ï–ì–ï–ù–î–ê–†–ù–´–ï
            ("–û—á–∏—Å—Ç–∏—Ç–µ–ª—å –•—Ä–∞–º–∞", "–ü–æ–º—ã–ª –¥—É—Ö–æ–≤–∫—É –î–û –ë–õ–ï–°–ö–ê", "üî•", 10, "–ü–æ—Å–ª–µ–¥–Ω–∏–π –ì–µ—Ä–æ–π –ì—Ä—è–∑–Ω–æ–π –ö—É—Ö–Ω–∏", "legendary", 0),
            ("–ì–µ—Ä–æ–π –ú–æ—Ä–æ–∑–∏–ª–∫–∏", "–†–∞–∑–º–æ—Ä–æ–∑–∏–ª + –≤—ã–º—ã–ª + –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≤–µ—Ä–Ω—É–ª –≤—Å—ë –Ω–∞ –º–µ—Å—Ç–æ", "‚ùÑÔ∏è", 12, "–ü–æ–∫–æ—Ä–∏—Ç–µ–ª—å –õ–µ–¥—è–Ω–æ–≥–æ –ê–¥–∞", "legendary", 0),
            ("–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫ –°—É–¥—å–±—ã", "–ü–æ—á–∏–Ω–∏–ª –∫–∞–ø–∞—é—â–∏–π –∫—Ä–∞–Ω –°–ê–ú", "üîß", 15, "–ú–∞–≥ –ì–∞–µ—á–Ω—ã—Ö –ö–ª—é—á–µ–π", "legendary", 0),
            ("–•—Ä–∞–Ω–∏—Ç–µ–ª—å –ü–æ—Ä—è–¥–∫–∞", "–ü—Ä–∏–≤—ë–ª –≤ –ø–æ—Ä—è–¥–æ–∫ —à–∫–∞—Ñ, –≤ –∫–æ—Ç–æ—Ä–æ–º '–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π—Ç–∏'", "üóÑÔ∏è", 10, "–ê—Ä—Ö–∏–≤–∞—Ä–∏—É—Å –•–∞–æ—Å–∞", "legendary", 0),
            ("–í–ª–∞—Å—Ç–µ–ª–∏–Ω –í—Ä–µ–º–µ–Ω–∏", "–°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –Ω–µ–¥–µ–ª—é, –∏ –≤—Å—ë –ø—Ä–æ—à–ª–æ –ø–æ –ø–ª–∞–Ω—É", "‚è≥", 12, "–ü—Ä–æ—Ä–æ–∫ –†–∞—Å–ø–∏—Å–∞–Ω–∏—è", "legendary", 0),
            ("–ì—É—Ä—É –ë—é–¥–∂–µ—Ç–∞", "–û–ø–ª–∞—Ç–∏–ª –≤—Å–µ —Å—á–µ—Ç–∞ + –Ω–∞—à—ë–ª —Å–ø–æ—Å–æ–± —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å", "üí∞", 8, "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ù–∏–Ω–¥–∑—è", "legendary", 0),

            # üòà –ü–û–ó–û–†–ù–´–ï
            ("–ü–æ—Å–æ–ª –ì—Ä—è–∑–∏", "–ù–µ –º—ã–ª –ø–æ—Å—É–¥—É 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥", "ü¶†", -5, "–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –ë–∞–∫—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π –ò–º–ø–µ—Ä–∏–∏", "shameful", 0),
            ("–ú–∞—Å—Ç–µ—Ä –û—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è", "–û—Ç–∫–ª–∞–¥—ã–≤–∞–ª –æ–¥–Ω–æ –¥–µ–ª–æ –±–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏", "üêå", -3, "–ß–µ–º–ø–∏–æ–Ω –ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–∏", "shameful", 0),
            ("–°–∞–±–æ—Ç–∞–∂–Ω–∏–∫ –ü—ã–ª–µ—Å–æ—Å–∞", "–í–∏–¥–µ–ª –ø—ã–ª—å, –Ω–æ —Å–¥–µ–ª–∞–ª –≤–∏–¥, —á—Ç–æ –Ω–µ –∑–∞–º–µ—Ç–∏–ª", "üôà", -2, "–®–ø–∏–æ–Ω –•–∞–æ—Å–∞", "shameful", 0),
            ("–ì–µ–Ω–∏–π –ó–∞–±—ã–≤—á–∏–≤–æ—Å—Ç–∏", "–ó–∞–±—ã–ª –≤—ã–Ω–µ—Å—Ç–∏ –º—É—Å–æ—Ä, –∏ –æ–Ω –ø–µ—Ä–µ–ø–æ–ª–Ω–∏–ª—Å—è", "ü§Ø", -4, "–ü–æ—Å–ª–µ–¥–Ω–∏–π –ú—É—Å–æ—Ä–Ω—ã–π –®–∞–º–∞–Ω", "shameful", 0),
            ("–ö–æ—Ä–æ–ª—å –û—Ç–≥–æ–≤–æ—Ä–æ–∫", "–ü—Ä–∏–¥—É–º–∞–ª 5 –ø—Ä–∏—á–∏–Ω, –ø–æ—á–µ–º—É –Ω–µ –º–æ–∂–µ—Ç —É–±—Ä–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è", "ü§•", -5, "–ú–∞—Å—Ç–µ—Ä –û–ø—Ä–∞–≤–¥–∞–Ω–∏–π", "shameful", 0),
            ("–¢—Ä–æ–ª–ª—å –£–±–æ—Ä–∫–∏", "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ—Å—Ç–∞–≤–∏–ª –æ–¥–Ω—É –≥—Ä—è–∑–Ω—É—é —Ç–∞—Ä–µ–ª–∫—É, —á—Ç–æ–±—ã '–Ω–µ –±—ã–ª–æ –∏–¥–µ–∞–ª—å–Ω–æ'", "üòà", -3, "–ê–≥–µ–Ω—Ç –•–∞–æ—Å–∞", "shameful", 0),

            # üíò –†–û–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ï
            ("–°–µ—Ä–¥—Ü–µ–µ–¥ –ß–∏—Å—Ç–æ—Ç—ã", "–°–¥–µ–ª–∞–ª —É–±–æ—Ä–∫—É + –æ—Å—Ç–∞–≤–∏–ª –∑–∞–ø–∏—Å–∫—É —Å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–º", "üíå", 7, "–†–æ–º–∞–Ω—Ç–∏–∫ —Å –¢—Ä—è–ø–∫–æ–π", "romantic", 0),
            ("–£–∂–∏–Ω –ø—Ä–∏ –°–≤–µ—á–∞—Ö (–∏ –±–µ–∑ –ø–æ—Å—É–¥—ã –ø–æ—Å–ª–µ)", "–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —É–∂–∏–Ω + —É–±—Ä–∞–ª –≤—Å—ë", "üïØÔ∏è", 10, "–ö—É–ø–∏–¥–æ–Ω –ö—É—Ö–Ω–∏", "romantic", 0),
            ("–°—é—Ä–ø—Ä–∏–∑-–ê—Ç–∞–∫–∞", "–°–¥–µ–ª–∞–ª –º–∞—Å—Å–∞–∂ –ø–æ—Å–ª–µ —Ç—è–∂—ë–ª–æ–≥–æ –¥–Ω—è –±–µ–∑ –ø—Ä–æ—Å—å–±—ã", "üíÜ‚Äç‚ôÇÔ∏è", 8, "–¢–∞–π–Ω—ã–π –¶–µ–ª–∏—Ç–µ–ª—å", "romantic", 0),
            ("–¢–∞–Ω—Ü–ø–æ–ª –Ω–∞ –ö—É—Ö–Ω–µ", "–í–∫–ª—é—á–∏–ª –º—É–∑—ã–∫—É –∏ —É–±–∏—Ä–∞–ª—Å—è –≤–º–µ—Å—Ç–µ —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º —Ç–∞–Ω—Ü—É—è", "üï∫", 6, "–î–∏–¥–∂–µ–π –ß–∏—Å—Ç–æ—Ç—ã", "romantic", 0),
            ("–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π –ù–∏–Ω–¥–∑—è", "–ö—É–ø–∏–ª –ø–æ–¥–∞—Ä–æ–∫ –±–µ–∑ –ø–æ–≤–æ–¥–∞ –∏ –≤—Ä—É—á–∏–ª —Å –∏–Ω—Ç—Ä–∏–≥–æ–π", "üéÅ", 8, "–≠–ª—å—Ñ –°—é—Ä–ø—Ä–∏–∑–æ–≤", "romantic", 0),

            # üé≤ –í–ï–°–Å–õ–´–ï
            ("–°–ª—É—á–∞–π–Ω—ã–π –ì–µ–Ω–∏–π", "–°–ª—É—á–∞–π–Ω–æ –ø—Ä–∏–¥—É–º–∞–ª –≥–µ–Ω–∏–∞–ª—å–Ω—ã–π –ª–∞–π—Ñ—Ö–∞–∫ –ø–æ –¥–æ–º—É", "üß†", 5, "–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –ë—ã—Ç–∞", "funny", 0),
            ("–ú–µ–º-–ú–∞—Å—Ç–µ—Ä", "–°—Ñ–æ—Ç–∫–∞–ª —Å–º–µ—à–Ω–æ–π –º–æ–º–µ–Ω—Ç —É–±–æ—Ä–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤ —Å–µ–º–µ–π–Ω—ã–π –∞—Ä—Ö–∏–≤", "üì∏", 3, "–•—Ä–∞–Ω–∏—Ç–µ–ª—å –°–º–µ—Ö–∞", "funny", 0),
            ("–û–¥–Ω–æ—Ä—É–∫–∏–π –ü—ã–ª–µ—Å–æ—Å", "–£–±–∏—Ä–∞–ª –æ–¥–Ω–æ–π —Ä—É–∫–æ–π, –¥–µ—Ä–∂–∞ —Ç–µ–ª–µ—Ñ–æ–Ω/–∫–æ—à–∫—É", "ü§π", 4, "–¶–∏—Ä–∫–∞—á –î–æ–º–∞", "funny", 0),
            ("–ì–æ–ª–æ—Å–æ–≤–æ–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –†–µ–∞–ª—å–Ω–æ—Å—Ç–∏", "–û—Ç–¥–∞–ª –∫–æ–º–∞–Ω–¥—É '–ê–ª–∏—Å–∞/–°–∏—Ä–∏, –Ω–∞–ø–æ–º–Ω–∏...' –∏ —ç—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ", "ü§ñ", 2, "–ú–∞–≥ –ì–∞–¥–∂–µ—Ç–æ–≤", "funny", 0),
            ("–°–ø–∞—Å–∏—Ç–µ–ª—å –ü–æ—Å—É–¥—ã", "–£—Å–ø–µ–ª –ø–æ–º—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–∞—Ä–µ–ª–∫—É –ø–µ—Ä–µ–¥ –≤–∏–∑–∏—Ç–æ–º –≥–æ—Å—Ç–µ–π", "‚è±Ô∏è", 5, "–ì–µ—Ä–æ–π –ü–æ—Å–ª–µ–¥–Ω–µ–π –ú–∏–Ω—É—Ç—ã", "funny", 0),
            ("–§–∏–ª–æ—Å–æ—Ñ –ì—Ä—è–∑–∏", "–í–º–µ—Å—Ç–æ —É–±–æ—Ä–∫–∏ —Å–µ–ª –∏ –ø–æ—Ä–∞–∑–º—ã—à–ª—è–ª –æ —Å–º—ã—Å–ª–µ —á–∏—Å—Ç–æ—Ç—ã", "ü§î", -1, "–ú—ã—Å–ª–∏—Ç–µ–ª—å —Å –¢—Ä—è–ø–∫–æ–π", "funny", 0),

            # üëë –ë–û–°–°-–ú–û–î–´
            ("–ù–µ–¥–µ–ª—è –ë–µ–∑ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", "–í—Å—é –Ω–µ–¥–µ–ª—é –¥–µ–ª–∞–ª –¥–µ–ª–∞ –±–µ–∑ –µ–¥–∏–Ω–æ–≥–æ '–∞ —Ç—ã —Å–¥–µ–ª–∞–ª?'", "üìÖ", 15, "–°–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –ì–µ—Ä–æ–π", "boss", 0),
            ("–ú–µ—Å—è—Ü –ò–¥–µ–∞–ª—å–Ω–æ–≥–æ –ë–∞–ª–∞–Ω—Å–∞", "–û–±–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –Ω–∞–±—Ä–∞–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤", "‚öñÔ∏è", 20, "–ì–∞—Ä–º–æ–Ω–∏—è –ë—ã—Ç–∞", "boss", 0),
            ("–¢—ë–º–Ω–∞—è –°—Ç–æ—Ä–æ–Ω–∞ –õ–µ–Ω–∏", "–¶–µ–ª—ã–π –¥–µ–Ω—å –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–ª, –Ω–æ —á–µ—Å—Ç–Ω–æ –ø—Ä–∏–∑–Ω–∞–ª—Å—è", "üåö", -10, "–ò—Å–∫—Ä–µ–Ω–Ω–∏–π –¢—Ä–æ–ª–ª—å", "boss", 0),
            ("–†–µ–∂–∏–º –ë–æ–≥–∞ –î–æ–º–∞", "–ó–∞ –Ω–µ–¥–µ–ª—é –≤—ã–ø–æ–ª–Ω–∏–ª 50+ –±–∞–ª–ª–æ–≤", "‚ö°", 25, "–ë–æ–∂–µ—Å—Ç–≤–æ –ë—ã—Ç–∞", "boss", 0),
            ("–°—É–ø–µ—Ä–∫–æ–º–±–æ –ü–∞—Ä—Ç–Ω—ë—Ä–æ–≤", "–°–¥–µ–ª–∞–ª–∏ –æ–¥–Ω–æ –¥–µ–ª–æ –í–ú–ï–°–¢–ï –∏ –ø–æ–ª—É—á–∏–ª–∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ", "ü§ù", 10, "–ö–æ–º–∞–Ω–¥–∞ –ú–µ—á—Ç—ã", "boss", 0),

            # üïµÔ∏è‚Äç‚ôÇÔ∏è –°–ï–ö–†–ï–¢–ù–´–ï
            ("–°–µ–∫—Ä–µ—Ç–Ω—ã–π –ê–≥–µ–Ω—Ç –õ—é–±–≤–∏", "–°–¥–µ–ª–∞–ª —á—Ç–æ-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–µ –±–µ–∑ –ø–æ–≤–æ–¥–∞ –∏ –Ω–µ —Å–∫–∞–∑–∞–ª –æ–± —ç—Ç–æ–º", "üïµÔ∏è‚Äç‚ôÇÔ∏è", 10, "–ê–≥–µ–Ω—Ç –õ—é–±–≤–∏", "secret", 1),
            ("–ú–∞—Å—Ç–µ—Ä –ü–æ–¥–º–µ–Ω—ã", "–°–¥–µ–ª–∞–ª –¥–µ–ª–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞, –ø–æ–∫–∞ —Ç–æ—Ç –æ—Ç–¥—ã—Ö–∞–ª", "üîÑ", 8, "–¢–µ–Ω—å –ó–∞–±–æ—Ç—ã", "secret", 1),
            ("–§–∏–ª–∞–Ω—Ç—Ä–æ–ø –•–∞–æ—Å–∞", "–ü–æ–∑–≤–æ–ª–∏–ª –¥–æ–º—É –±—ã—Ç—å –Ω–µ–º–Ω–æ–≥–æ –Ω–µ–∏–¥–µ–∞–ª—å–Ω—ã–º, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å —Å—Ç—Ä–µ—Å—Å —Å –ø–∞—Ä—Ç–Ω—ë—Ä–∞", "üßò‚Äç‚ôÄÔ∏è", 5, "–ú—É–¥—Ä–µ—Ü –ë–∞–ª–∞–Ω—Å–∞", "secret", 1),
        ]

        for name, desc, icon, points, title, ach_type, is_hidden in achievements_data:
            await db.execute('''
                INSERT OR IGNORE INTO achievements (name, description, icon, points, title, type, is_hidden)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (name, desc, icon, points, title, ach_type, is_hidden))

        # –ü—Ä–∏–º–µ—Ä—ã –∫–≤–µ—Å—Ç–æ–≤
        quests = [
            ("–£–∂–∏–Ω —Å –ª—é–±–æ–≤—å—é", "–ü—Ä–∏–≥–æ—Ç–æ–≤—å —É–∂–∏–Ω –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞", "—É–∂–∏–Ω", 5),
            ("–ì–ª–∞–¥–∏–ª—å–Ω–∞—è –∞—Ç–∞–∫–∞", "–ü–æ–≥–ª–∞–¥—å 5+ –≤–µ—â–µ–π", "–≥–ª–∞–¥", 4),
            ("–¢–∞–π–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫", "–°–¥–µ–ª–∞–π –¥–µ–ª–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞, –ø–æ–∫–∞ –æ–Ω –Ω–µ –≤–∏–¥–∏—Ç", "—Ç–∞–π–Ω–æ", 6),
            ("–ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞", "–í–∫–ª—é—á–∏ –º—É–∑—ã–∫—É –∏ —É–±–µ—Ä–∏ –æ–¥–Ω—É –∫–æ–º–Ω–∞—Ç—É", "–º—É–∑—ã–∫", 3),
            ("–§–æ—Ç–æ –º–æ–º–µ–Ω—Ç–∞", "–°–¥–µ–ª–∞–π —Ñ–æ—Ç–æ —É—é—Ç–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–∏", "—Ñ–æ—Ç–æ", 4),
            ("–ó–∞–±–æ—Ç–∞ –±–µ–∑ —Å–ª–æ–≤", "–°–¥–µ–ª–∞–π —á—Ç–æ-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–µ –±–µ–∑ –ø—Ä–æ—Å—å–±—ã", "–ø—Ä–∏—è—Ç–Ω–æ", 7),
        ]
        for name, desc, keyword, points in quests:
            await db.execute('''
                INSERT OR IGNORE INTO quests (name, description, task_keyword, bonus_points)
                VALUES (?, ?, ?, ?)
            ''', (name, desc, keyword, points))

        await db.commit()

# ============ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ============
def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

def get_main_menu(user_id: int = None):
    buttons = [
        [KeyboardButton(text="üìã –ú–æ–∏ –¥–µ–ª–∞"), KeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥")],
        [KeyboardButton(text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å"), KeyboardButton(text="üéØ –¶–µ–ª–∏ –Ω–µ–¥–µ–ª–∏")],
        [KeyboardButton(text="üèÖ –ú–æ–∏ –∞—á–∏–≤–∫–∏"), KeyboardButton(text="üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
    ]
    if user_id and is_admin(user_id):
        buttons.append([KeyboardButton(text="üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

async def update_level(user_id: int):
    async with aiosqlite.connect('household.db') as db:
        async with db.execute('SELECT score, level FROM users WHERE user_id = ?', (user_id,)) as cursor:
            row = await cursor.fetchone()
            if not row:
                return
            score, current_level = row

        new_level = min(10, score // 100 + 1)

        if new_level > current_level:
            async with db.execute('SELECT name FROM users WHERE user_id = ?', (user_id,)) as cursor:
                name = (await cursor.fetchone())[0]

            HUSBAND_RANKS = [
                "–ù–æ–≤–∏—á–æ–∫", "–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ—Å—É–¥–æ–º–æ–π–∫–∏", "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —É–±–æ—Ä–∫–∏", "–ú–ª–∞–¥—à–∏–π –¥–≤–æ—Ä–µ—Ü–∫–∏–π",
                "–°—Ç–∞—Ä—à–∏–π –¥–≤–æ—Ä–µ—Ü–∫–∏–π", "–ú–µ–Ω–µ–¥–∂–µ—Ä —Ö–∞–æ—Å–∞", "–î–∏—Ä–µ–∫—Ç–æ—Ä —á–∏—Å—Ç–æ—Ç—ã", "–í–∏—Ü–µ-–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –±—ã—Ç–∞",
                "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç –¥–æ–º–∞", "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä —É—é—Ç–∞", "–ë–æ–∂–µ—Å—Ç–≤–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –æ—á–∞–≥–∞"
            ]
            WIFE_RANKS = [
                "–ù–æ–≤–∏—á–æ–∫", "–§–µ—è —á–∏—Å—Ç–æ—Ç—ã", "–•—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –ø–æ—Ä—è–¥–∫–∞", "–ú–∞–≥ —É–±–æ—Ä–∫–∏",
                "–ì—É—Ä—É –±—ã—Ç–∞", "–ö–æ—Ä–æ–ª–µ–≤–∞ –¥–æ–º–∞", "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞ —É—é—Ç–∞", "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –≥–∞—Ä–º–æ–Ω–∏–∏",
                "–í–ª–∞—Å—Ç–µ–ª–∏–Ω–∫–∞ –∫–æ–º—Ñ–æ—Ä—Ç–∞", "–ë–æ–≥–∏–Ω—è –¥–æ–º–∞—à–Ω–µ–≥–æ –æ—á–∞–≥–∞", "–õ–µ–≥–µ–Ω–¥–∞ —Å–µ–º–µ–π–Ω–æ–≥–æ –≥–Ω–µ–∑–¥—ã—à–∫–∞"
            ]
            NEUTRAL_RANKS = [
                "–ù–æ–≤–∏—á–æ–∫", "–£–±–æ—Ä—â–∏–∫-—Å—Ç–∞–∂—ë—Ä", "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —á–∏—Å—Ç–æ—Ç—ã", "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø–æ—Ä—è–¥–∫—É",
                "–≠–∫—Å–ø–µ—Ä—Ç –±—ã—Ç–∞", "–ú–∞—Å—Ç–µ—Ä –¥–æ–º–∞—à–Ω–µ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞", "–ì—É—Ä—É —É—é—Ç–∞", "–õ–µ–≥–µ–Ω–¥–∞ —á–∏—Å—Ç–æ—Ç—ã",
                "–ú–µ—Å—Å–∏—è –ø–æ—Ä—è–¥–∫–∞", "–ë–æ–∂–µ—Å—Ç–≤–æ –±—ã—Ç–∞", "–í–µ—á–Ω—ã–π —á–µ–º–ø–∏–æ–Ω –¥–æ–º–∞—à–Ω–µ–≥–æ –æ—á–∞–≥–∞"
            ]

            if name.endswith(("–∞", "—è")) and name not in ["–ò–ª—å—è", "–ù–∏–∫–∏—Ç–∞"]:
                rank_list = WIFE_RANKS
            else:
                rank_list = HUSBAND_RANKS

            if new_level <= len(rank_list):
                new_rank = rank_list[new_level - 1]
            else:
                new_rank = NEUTRAL_RANKS[min(new_level - 1, len(NEUTRAL_RANKS) - 1)]

            await db.execute('UPDATE users SET level = ?, last_level_up = ? WHERE user_id = ?', 
                           (new_level, datetime.now().isoformat(), user_id))
            await db.commit()

            await bot.send_message(
                user_id,
                f"üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –¢—ã –¥–æ—Å—Ç–∏–≥(–ª–∞) {new_level} —É—Ä–æ–≤–Ω—è!\n"
                f"–¢–≤–æ–π –Ω–æ–≤—ã–π —Ä–∞–Ω–≥: *{new_rank}*\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üöÄ",
                parse_mode="Markdown"
            )

async def record_daily_action(user_id: int, action: str):
    today = datetime.now().strftime("%Y-%m-%d")
    async with aiosqlite.connect('household.db') as db:
        await db.execute('''
            INSERT OR IGNORE INTO daily_actions (user_id, date, dishwasher_used, trash_taken_out, dishes_washed)
            VALUES (?, ?, 0, 0, 0)
        ''', (user_id, today))

        if action == "dishwasher":
            await db.execute('UPDATE daily_actions SET dishwasher_used = 1 WHERE user_id = ? AND date = ?', (user_id, today))
        elif action == "trash":
            await db.execute('UPDATE daily_actions SET trash_taken_out = 1 WHERE user_id = ? AND date = ?', (user_id, today))
        elif action == "dishes":
            await db.execute('UPDATE daily_actions SET dishes_washed = 1 WHERE user_id = ? AND date = ?', (user_id, today))

        await db.commit()

async def create_new_season():
    now = datetime.now()
    season_name = now.strftime("%B %Y")
    start_date = now.strftime("%Y-%m-01")
    if now.month == 12:
        end_date = f"{now.year + 1}-01-01"
    else:
        end_date = f"{now.year}-{now.month + 1:02d}-01"

    async with aiosqlite.connect('household.db') as db:
        await db.execute('UPDATE seasons SET is_active = 0 WHERE is_active = 1')

        await db.execute('''
            INSERT OR IGNORE INTO seasons (name, start_date, end_date, is_active)
            VALUES (?, ?, ?, 1)
        ''', (season_name, start_date, end_date))

        season_id = None
        async with db.execute('SELECT id FROM seasons WHERE name = ?', (season_name,)) as cursor:
            row = await cursor.fetchone()
            if row:
                season_id = row[0]

        if not season_id:
            return

        async with db.execute('SELECT user_id, score, level FROM users') as cursor:
            users = await cursor.fetchall()

        for user_id, score, level in users:
            await db.execute('''
                INSERT OR IGNORE INTO user_season_archive (user_id, season_id, final_score, final_level)
                VALUES (?, ?, ?, ?)
            ''', (user_id, season_id, score, level))

        async with db.execute('''
            SELECT ct.user_id, t.name, t.points, ct.completed_at
            FROM completed_tasks ct
            JOIN tasks t ON ct.task_id = t.id
            WHERE date(ct.completed_at) >= ?
        ''', (start_date,)) as cursor:
            tasks = await cursor.fetchall()

        for user_id, task_name, points, completed_at in tasks:
            await db.execute('''
                INSERT INTO completed_tasks_archive (user_id, task_name, points, completed_at, season_id)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, task_name, points, completed_at, season_id))

        await db.execute('UPDATE users SET score = 0, level = 1')
        await db.commit()

        async with db.execute('SELECT user_id FROM users') as cursor:
            users = await cursor.fetchall()

        for (user_id,) in users:
            try:
                await bot.send_message(
                    user_id,
                    f"üéâ *–ù–æ–≤—ã–π —Å–µ–∑–æ–Ω: {season_name}!*\n\n"
                    "–í—Å–µ –±–∞–ª–ª—ã –∏ —É—Ä–æ–≤–Ω–∏ —Å–±—Ä–æ—à–µ–Ω—ã!\n"
                    "–ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π ‚Äî —Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n"
                    "–°—Ç–∞–Ω—å —á–µ–º–ø–∏–æ–Ω–æ–º —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞! üèÜ",
                    parse_mode="Markdown"
                )
            except:
                pass

# ============ –ò–ò-–°–û–í–ï–¢–ù–ò–ö ============
ADVICE_TEMPLATES = [
    "–¢—ã {days} –¥–Ω–µ–π –Ω–µ {task} ‚Äî –º–æ–∂–µ—Ç, –ø–æ—Ä–∞? üòâ",
    "–¢—ã —á–∞—Å—Ç–æ –¥–µ–ª–∞–µ—à—å {category} ‚Äî –ø–æ–ø—Ä–æ–±—É–π ‚Äò{suggestion}‚Äô, —ç—Ç–æ –¥–∞—Å—Ç +{points} –±–∞–ª–ª–æ–≤!",
    "{partner} –≤—á–µ—Ä–∞ —Å–¥–µ–ª–∞–ª(–∞) ‚Äò{task}‚Äô –∑–∞ —Ç–µ–±—è ‚Äî –º–æ–∂–µ—Ç, –æ—Ç–±–ª–∞–≥–æ–¥–∞—Ä–∏—à—å {reward}?",
    "–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è ‚Äò{task}‚Äô ‚Äî —Å–¥–µ–ª–∞–π –∏ –ø–æ–ª—É—á–∏ +{points} –±–∞–ª–ª–æ–≤!",
    "–¢—ã –≤ {steps} –¥–µ–ª–∞—Ö –æ—Ç –∞—á–∏–≤–∫–∏ ‚Äò{achievement}‚Äô ‚Äî —Å–∞–º–æ–µ –≤—Ä–µ–º—è!",
    "–†–µ–¥–∫–æ–µ, –Ω–æ —â–µ–¥—Ä–æ–µ –¥–µ–ª–æ: ‚Äò{task}‚Äô ‚Äî —Ü–µ–ª—ã—Ö +{points} –±–∞–ª–ª–æ–≤!",
    "–ü–æ—á–µ–º—É –±—ã –Ω–µ —É—Å—Ç—Ä–æ–∏—Ç—å ‚Äò{fun_task}‚Äô? –≠—Ç–æ –ø–æ–¥–Ω–∏–º–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–∞–º –æ–±–æ–∏–º üòä",
]

async def generate_ai_advice(user_id: int):
    advice = "–°–æ–≤–µ—Ç –¥–Ω—è –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω üòÖ"
    partner_name = "—Ç–≤–æ–π –ø–∞—Ä—Ç–Ω—ë—Ä"

    async with aiosqlite.connect('household.db') as db:
        async with db.execute('SELECT name FROM users WHERE user_id = ?', (user_id,)) as cursor:
            row = await cursor.fetchone()
            if not row:
                return advice
            user_name = row[0]

        partner_id = ADMINS[0] if user_id != ADMINS[0] else ADMINS[1] if len(ADMINS) > 1 else None
        if partner_id:
            async with db.execute('SELECT name FROM users WHERE user_id = ?', (partner_id,)) as cursor:
                row = await cursor.fetchone()
                if row:
                    partner_name = row[0]

        three_days_ago = (datetime.now() - timedelta(days=3)).strftime("%Y-%m-%d")
        async with db.execute('''
            SELECT t.name FROM tasks t
            WHERE t.id NOT IN (
                SELECT task_id FROM completed_tasks 
                WHERE user_id = ? AND date(completed_at) > ?
            )
            ORDER BY RANDOM() LIMIT 1
        ''', (user_id, three_days_ago)) as cursor:
            row = await cursor.fetchone()
            if row:
                task_name = row[0]
                return ADVICE_TEMPLATES[0].format(days="3", task=task_name.lower())

        async with db.execute('''
            SELECT t.category, COUNT(*) as cnt
            FROM completed_tasks ct
            JOIN tasks t ON ct.task_id = t.id
            WHERE ct.user_id = ?
            GROUP BY t.category
            ORDER BY cnt DESC LIMIT 1
        ''', (user_id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                top_category, _ = row
                async with db.execute('''
                    SELECT name, points FROM tasks 
                    WHERE category = ? AND id NOT IN (
                        SELECT task_id FROM completed_tasks WHERE user_id = ?
                    )
                    ORDER BY RANDOM() LIMIT 1
                ''', (top_category, user_id)) as cursor:
                    row2 = await cursor.fetchone()
                    if row2:
                        suggestion, points = row2
                        return ADVICE_TEMPLATES[1].format(category=top_category, suggestion=suggestion, points=points)

        yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
        if partner_id:
            async with db.execute('''
                SELECT t.name FROM completed_tasks ct
                JOIN tasks t ON ct.task_id = t.id
                WHERE ct.user_id = ? AND date(ct.completed_at) = ?
                ORDER BY RANDOM() LIMIT 1
            ''', (partner_id, yesterday)) as cursor:
                row = await cursor.fetchone()
                if row:
                    task_done = row[0]
                    rewards = ["–º–∞—Å—Å–∞–∂", "—á–∞—à–∫—É —á–∞—è", "–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç", "—Å—é—Ä–ø—Ä–∏–∑"]
                    reward = random.choice(rewards)
                    return ADVICE_TEMPLATES[2].format(partner=partner_name, task=task_done, reward=reward)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–∏–∂–∞–π—à–µ–π –∞—á–∏–≤–∫–∏
        async with db.execute('''
            SELECT a.name FROM achievements a
            LEFT JOIN user_achievements ua ON a.id = ua.achievement_id AND ua.user_id = ?
            WHERE ua.id IS NULL
            ORDER BY RANDOM() LIMIT 1
        ''', (user_id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                ach_name = row[0]
                return ADVICE_TEMPLATES[4].format(steps="2-3", achievement=ach_name)

    return random.choice(ADVICE_TEMPLATES).format(
        days="–Ω–µ—Å–∫–æ–ª—å–∫–æ",
        task="—á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–ª–µ–∑–Ω–æ–µ",
        category="–±—ã—Ç",
        suggestion="–ª—é–±–æ–µ –Ω–æ–≤–æ–µ –¥–µ–ª–æ",
        points="5-10",
        partner=partner_name,
        reward="—á—Ç–æ-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–µ",
        achievement="—Å–ª–µ–¥—É—é—â—É—é –∞—á–∏–≤–∫—É",
        fun_task="—Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω—É—é —É–±–æ—Ä–∫—É"
    )

async def send_daily_advice():
    async with aiosqlite.connect('household.db') as db:
        async with db.execute('SELECT user_id FROM users') as cursor:
            users = await cursor.fetchall()

    for (user_id,) in users:
        advice = await generate_ai_advice(user_id)
        try:
            await bot.send_message(
                user_id,
                f"üß† *–ò–ò-—Å–æ–≤–µ—Ç–Ω–∏–∫ –≥–æ–≤–æ—Ä–∏—Ç:*\n\n{advice}\n\n–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–≤–µ—Ç ‚Äî —Ç—ã –º–æ–ª–æ–¥–µ—Ü –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ! ‚ù§Ô∏è",
                parse_mode="Markdown"
            )
        except:
            pass

# ============ –ö–ê–õ–ï–ù–î–ê–†–¨ ============
@dp.message(lambda message: message.text == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å" or message.text.startswith("/calendar"))
async def show_calendar(message: types.Message):
    parts = message.text.split()
    now = datetime.now()
    year, month = now.year, now.month

    if len(parts) > 1:
        try:
            date_str = parts[1]
            year, month = map(int, date_str.split('-'))
        except:
            pass

    month_name_str = month_name[month]
    async with aiosqlite.connect('household.db') as db:
        start_date = f"{year}-{month:02d}-01"
        if month == 12:
            end_date = f"{year + 1}-01-01"
        else:
            end_date = f"{year}-{month + 1:02d}-01"

        async with db.execute('''
            SELECT strftime('%d', completed_at) as day, t.name, t.points, t.category
            FROM completed_tasks ct
            JOIN tasks t ON ct.task_id = t.id
            WHERE ct.user_id = ? AND completed_at >= ? AND completed_at < ?
            ORDER BY completed_at
        ''', (message.from_user.id, start_date, end_date)) as cursor:
            tasks = await cursor.fetchall()

    days = {}
    for day, name, points, category in tasks:
        if day not in days:
            days[day] = []
        days[day].append((name, points, category))

    cal = monthcalendar(year, month)
    lines = []
    lines.append(f"üìÜ *–ö–∞–ª–µ–Ω–¥–∞—Ä—å: {month_name_str} {year}*")
    lines.append("–ü–Ω –í—Ç –°—Ä –ß—Ç –ü—Ç –°–± –í—Å")

    category_icons = {
        "üçΩ –ö–£–•–ù–Ø": "üçΩ",
        "üßπ –£–ë–û–†–ö–ê": "üßπ",
        "üß∫ –°–¢–ò–†–ö–ê": "üß∫",
        "üõí –ë–´–¢": "üõí",
        "üê∂ –ü–ò–¢–û–ú–¶–´": "üê∂",
        "üí° –û–°–û–ë–´–ï": "üí°",
        "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏": "üìå",
    }

    for week in cal:
        week_str = ""
        icons_str = ""
        for day in week:
            if day == 0:
                week_str += "   "
                icons_str += "  "
            else:
                day_str = f"{day:2d}"
                week_str += day_str + " "
                d_str = str(day)
                if d_str in days:
                    icons = set()
                    for _, _, cat in days[d_str]:
                        icon = category_icons.get(cat, "üìå")
                        icons.add(icon)
                    icons_str += "".join(list(icons)[:2])
                else:
                    icons_str += "  "
        lines.append(week_str.rstrip())
        if icons_str.strip():
            lines.append(icons_str)

    lines.append("\n*üçΩ=–∫—É—Ö–Ω—è üßπ=—É–±–æ—Ä–∫–∞ üß∫=—Å—Ç–∏—Ä–∫–∞ üõí=–±—ã—Ç üë∂=–¥–µ—Ç–∏ üí°=–æ—Å–æ–±—ã–µ*")
    lines.append("\n–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–Ω—è ‚Äî –Ω–∞–ø–∏—à–∏ `/day 15`")

    await message.answer("\n".join(lines), parse_mode="Markdown")

@dp.message(lambda message: message.text.startswith("/day"))
async def show_day_details(message: types.Message):
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /day <—á–∏—Å–ª–æ>")
        return

    try:
        day = int(parts[1])
        now = datetime.now()
        date_str = f"{now.year}-{now.month:02d}-{day:02d}"
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")
        return

    async with aiosqlite.connect('household.db') as db:
        async with db.execute('''
            SELECT t.name, t.points, t.category
            FROM completed_tasks ct
            JOIN tasks t ON ct.task_id = t.id
            WHERE ct.user_id = ? AND date(ct.completed_at) = ?
            ORDER BY ct.completed_at
        ''', (message.from_user.id, date_str)) as cursor:
            tasks = await cursor.fetchall()

    if not tasks:
        await message.answer(f"üìÖ –í —ç—Ç–æ—Ç –¥–µ–Ω—å —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–ª(–∞). –û—Ç–¥—ã—Ö–∞–ª(–∞) ‚Äî —ç—Ç–æ —Ç–æ–∂–µ –≤–∞–∂–Ω–æ! üòä")
        return

    lines = [f"üìÖ *{date_str}*", ""]
    total = 0
    for name, points, category in tasks:
        lines.append(f"‚úÖ {name} (+{points} –±–∞–ª–ª–æ–≤) ‚Äî {category}")
        total += points

    lines.append(f"\n**–ò—Ç–æ–≥–æ: {total} –±–∞–ª–ª–æ–≤**")
    await message.answer("\n".join(lines), parse_mode="Markdown")

# ============ –ö–í–ï–°–¢–´ ============
async def assign_random_quest():
    async with aiosqlite.connect('household.db') as db:
        async with db.execute('SELECT user_id FROM users') as cursor:
            users = await cursor.fetchall()

        for (user_id,) in users:
            async with db.execute('SELECT 1 FROM quests WHERE assigned_to = ? AND completed_at IS NULL', (user_id,)) as cursor:
                if await cursor.fetchone():
                    continue

            async with db.execute('SELECT id, name, description, bonus_points FROM quests WHERE assigned_to IS NULL OR completed_at IS NOT NULL ORDER BY RANDOM() LIMIT 1') as cursor:
                row = await cursor.fetchone()
                if not row:
                    continue

                quest_id, name, desc, points = row

                await db.execute('''
                    UPDATE quests
                    SET is_active = 1, assigned_to = ?, assigned_at = ?, completed_at = NULL
                    WHERE id = ?
                ''', (user_id, datetime.now().isoformat(), quest_id))
                await db.commit()

                try:
                    await bot.send_message(
                        user_id,
                        f"‚ú® *–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–≤–µ—Å—Ç –æ—Ç –±–æ—Ç–∞!*\n\n"
                        f"¬´{name}¬ª\n{desc}\n\n"
                        f"üéØ –ë–æ–Ω—É—Å: +{points} –±–∞–ª–ª–æ–≤\n"
                        f"–ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ ‚Äî –Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏—è—Ç–Ω–æ üòâ",
                        parse_mode="Markdown"
                    )
                except:
                    pass

# ============ –ê–ß–ò–í–ö–ò ============
async def check_and_award_achievements(user_id: int, trigger: str = None, data: dict = None, task_name: str = None, category: str = None):
    unlocked = []

    async with aiosqlite.connect('household.db') as db:
        async with db.execute('''
            SELECT a.name FROM user_achievements ua
            JOIN achievements a ON ua.achievement_id = a.id
            WHERE ua.user_id = ?
        ''', (user_id,)) as cursor:
            current = await cursor.fetchall()
        current_names = {row[0] for row in current}

        # ============ –ü–†–û–í–ï–†–ö–ê –£–°–õ–û–í–ò–ô ============
        # ü¶∏‚Äç‚ôÇÔ∏è –ì–µ—Ä–æ–∏—á–µ—Å–∫–∏–µ
        if "–ú–∞—Å—Ç–µ—Ä –ü–æ—Å—É–¥–æ–º–æ–π–∫–∏" not in current_names and trigger == "dishwasher_streak" and data.get("days", 0) >= 7:
            unlocked.append("–ú–∞—Å—Ç–µ—Ä –ü–æ—Å—É–¥–æ–º–æ–π–∫–∏")

        if "–¢–µ–Ω—å –£–±–æ—Ä–∫–∏" not in current_names and trigger == "clean_while_sleep":
            unlocked.append("–¢–µ–Ω—å –£–±–æ—Ä–∫–∏")

        if "–ì–ª–∞–¥–∏–ª—å–Ω—ã–π –î—Ä–∞–∫–æ–Ω" not in current_names and trigger == "ironing_session" and data.get("items", 0) >= 20:
            unlocked.append("–ì–ª–∞–¥–∏–ª—å–Ω—ã–π –î—Ä–∞–∫–æ–Ω")

        if "–®–µ—Ñ-–Ω–µ–≤–∏–¥–∏–º–∫–∞" not in current_names and trigger == "stealth_dinner":
            unlocked.append("–®–µ—Ñ-–Ω–µ–≤–∏–¥–∏–º–∫–∞")

        if "–ú—É—Å–æ—Ä–Ω—ã–π –ú–∞–≥–Ω–∞—Ç" not in current_names and trigger == "trash_streak" and data.get("days", 0) >= 5:
            unlocked.append("–ú—É—Å–æ—Ä–Ω—ã–π –ú–∞–≥–Ω–∞—Ç")

        if "–ú–∞—Å—Ç–µ—Ä –ü–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤" not in current_names and trigger == "clean_negotiation":
            unlocked.append("–ú–∞—Å—Ç–µ—Ä –ü–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤")

        # üêâ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ
        if "–û—á–∏—Å—Ç–∏—Ç–µ–ª—å –•—Ä–∞–º–∞" not in current_names and trigger == "clean_oven":
            unlocked.append("–û—á–∏—Å—Ç–∏—Ç–µ–ª—å –•—Ä–∞–º–∞")

        if "–ì–µ—Ä–æ–π –ú–æ—Ä–æ–∑–∏–ª–∫–∏" not in current_names and trigger == "defrost_freezer":
            unlocked.append("–ì–µ—Ä–æ–π –ú–æ—Ä–æ–∑–∏–ª–∫–∏")

        if "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫ –°—É–¥—å–±—ã" not in current_names and trigger == "fix_faucet":
            unlocked.append("–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫ –°—É–¥—å–±—ã")

        if "–•—Ä–∞–Ω–∏—Ç–µ–ª—å –ü–æ—Ä—è–¥–∫–∞" not in current_names and trigger == "organize_closet":
            unlocked.append("–•—Ä–∞–Ω–∏—Ç–µ–ª—å –ü–æ—Ä—è–¥–∫–∞")

        if "–í–ª–∞—Å—Ç–µ–ª–∏–Ω –í—Ä–µ–º–µ–Ω–∏" not in current_names and trigger == "perfect_week":
            unlocked.append("–í–ª–∞—Å—Ç–µ–ª–∏–Ω –í—Ä–µ–º–µ–Ω–∏")

        if "–ì—É—Ä—É –ë—é–¥–∂–µ—Ç–∞" not in current_names and trigger == "save_money":
            unlocked.append("–ì—É—Ä—É –ë—é–¥–∂–µ—Ç–∞")

        # üòà –ü–æ–∑–æ—Ä–Ω—ã–µ
        if "–ü–æ—Å–æ–ª –ì—Ä—è–∑–∏" not in current_names and trigger == "no_dishes" and data.get("days", 0) >= 3:
            unlocked.append("–ü–æ—Å–æ–ª –ì—Ä—è–∑–∏")

        if "–ú–∞—Å—Ç–µ—Ä –û—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è" not in current_names and trigger == "procrastination" and data.get("days", 0) > 7:
            unlocked.append("–ú–∞—Å—Ç–µ—Ä –û—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è")

        if "–°–∞–±–æ—Ç–∞–∂–Ω–∏–∫ –ü—ã–ª–µ—Å–æ—Å–∞" not in current_names and trigger == "ignore_dust":
            unlocked.append("–°–∞–±–æ—Ç–∞–∂–Ω–∏–∫ –ü—ã–ª–µ—Å–æ—Å–∞")

        if "–ì–µ–Ω–∏–π –ó–∞–±—ã–≤—á–∏–≤–æ—Å—Ç–∏" not in current_names and trigger == "forgot_trash":
            unlocked.append("–ì–µ–Ω–∏–π –ó–∞–±—ã–≤—á–∏–≤–æ—Å—Ç–∏")

        if "–ö–æ—Ä–æ–ª—å –û—Ç–≥–æ–≤–æ—Ä–æ–∫" not in current_names and trigger == "excuses" and data.get("count", 0) >= 5:
            unlocked.append("–ö–æ—Ä–æ–ª—å –û—Ç–≥–æ–≤–æ—Ä–æ–∫")

        if "–¢—Ä–æ–ª–ª—å –£–±–æ—Ä–∫–∏" not in current_names and trigger == "leave_dirty_plate":
            unlocked.append("–¢—Ä–æ–ª–ª—å –£–±–æ—Ä–∫–∏")

        # üíò –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ
        if "–°–µ—Ä–¥—Ü–µ–µ–¥ –ß–∏—Å—Ç–æ—Ç—ã" not in current_names and trigger == "clean_with_note":
            unlocked.append("–°–µ—Ä–¥—Ü–µ–µ–¥ –ß–∏—Å—Ç–æ—Ç—ã")

        if "–£–∂–∏–Ω –ø—Ä–∏ –°–≤–µ—á–∞—Ö (–∏ –±–µ–∑ –ø–æ—Å—É–¥—ã –ø–æ—Å–ª–µ)" not in current_names and trigger == "romantic_dinner":
            unlocked.append("–£–∂–∏–Ω –ø—Ä–∏ –°–≤–µ—á–∞—Ö (–∏ –±–µ–∑ –ø–æ—Å—É–¥—ã –ø–æ—Å–ª–µ)")

        if "–°—é—Ä–ø—Ä–∏–∑-–ê—Ç–∞–∫–∞" not in current_names and trigger == "surprise_massage":
            unlocked.append("–°—é—Ä–ø—Ä–∏–∑-–ê—Ç–∞–∫–∞")

        if "–¢–∞–Ω—Ü–ø–æ–ª –Ω–∞ –ö—É—Ö–Ω–µ" not in current_names and trigger == "dance_cleaning":
            unlocked.append("–¢–∞–Ω—Ü–ø–æ–ª –Ω–∞ –ö—É—Ö–Ω–µ")

        if "–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π –ù–∏–Ω–¥–∑—è" not in current_names and trigger == "secret_gift":
            unlocked.append("–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π –ù–∏–Ω–¥–∑—è")

        # üé≤ –í–µ—Å—ë–ª—ã–µ
        if "–°–ª—É—á–∞–π–Ω—ã–π –ì–µ–Ω–∏–π" not in current_names and trigger == "lifehack":
            unlocked.append("–°–ª—É—á–∞–π–Ω—ã–π –ì–µ–Ω–∏–π")

        if "–ú–µ–º-–ú–∞—Å—Ç–µ—Ä" not in current_names and trigger == "funny_photo":
            unlocked.append("–ú–µ–º-–ú–∞—Å—Ç–µ—Ä")

        if "–û–¥–Ω–æ—Ä—É–∫–∏–π –ü—ã–ª–µ—Å–æ—Å" not in current_names and trigger == "one_hand_clean":
            unlocked.append("–û–¥–Ω–æ—Ä—É–∫–∏–π –ü—ã–ª–µ—Å–æ—Å")

        if "–ì–æ–ª–æ—Å–æ–≤–æ–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –†–µ–∞–ª—å–Ω–æ—Å—Ç–∏" not in current_names and trigger == "voice_assistant":
            unlocked.append("–ì–æ–ª–æ—Å–æ–≤–æ–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –†–µ–∞–ª—å–Ω–æ—Å—Ç–∏")

        if "–°–ø–∞—Å–∏—Ç–µ–ª—å –ü–æ—Å—É–¥—ã" not in current_names and trigger == "last_minute_clean":
            unlocked.append("–°–ø–∞—Å–∏—Ç–µ–ª—å –ü–æ—Å—É–¥—ã")

        if "–§–∏–ª–æ—Å–æ—Ñ –ì—Ä—è–∑–∏" not in current_names and trigger == "philosophize":
            unlocked.append("–§–∏–ª–æ—Å–æ—Ñ –ì—Ä—è–∑–∏")

        # üëë –ë–æ—Å—Å-–º–æ–¥—ã
        if "–ù–µ–¥–µ–ª—è –ë–µ–∑ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π" not in current_names and trigger == "no_reminders_week":
            unlocked.append("–ù–µ–¥–µ–ª—è –ë–µ–∑ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

        if "–ú–µ—Å—è—Ü –ò–¥–µ–∞–ª—å–Ω–æ–≥–æ –ë–∞–ª–∞–Ω—Å–∞" not in current_names and trigger == "perfect_balance_month":
            unlocked.append("–ú–µ—Å—è—Ü –ò–¥–µ–∞–ª—å–Ω–æ–≥–æ –ë–∞–ª–∞–Ω—Å–∞")

        if "–¢—ë–º–Ω–∞—è –°—Ç–æ—Ä–æ–Ω–∞ –õ–µ–Ω–∏" not in current_names and trigger == "honest_lazy_day":
            unlocked.append("–¢—ë–º–Ω–∞—è –°—Ç–æ—Ä–æ–Ω–∞ –õ–µ–Ω–∏")

        if "–†–µ–∂–∏–º –ë–æ–≥–∞ –î–æ–º–∞" not in current_names and trigger == "god_mode_week" and data.get("points", 0) >= 50:
            unlocked.append("–†–µ–∂–∏–º –ë–æ–≥–∞ –î–æ–º–∞")

        if "–°—É–ø–µ—Ä–∫–æ–º–±–æ –ü–∞—Ä—Ç–Ω—ë—Ä–æ–≤" not in current_names and trigger == "team_fun":
            unlocked.append("–°—É–ø–µ—Ä–∫–æ–º–±–æ –ü–∞—Ä—Ç–Ω—ë—Ä–æ–≤")

        # üïµÔ∏è‚Äç‚ôÇÔ∏è –°–µ–∫—Ä–µ—Ç–Ω—ã–µ ‚Äî –º–æ–∂–Ω–æ –≤—ã–¥–∞–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é

        # ============ –í–´–î–ê–ß–ê –ê–ß–ò–í–û–ö ============
        for ach_name in unlocked:
            async with db.execute('SELECT id, points, title, icon, description FROM achievements WHERE name = ?', (ach_name,)) as cursor:
                row = await cursor.fetchone()
                if row:
                    ach_id, points, title, icon, desc = row

                    await db.execute('UPDATE users SET score = score + ? WHERE user_id = ?', (points, user_id))

                    if title:
                        await db.execute('''
                            INSERT OR REPLACE INTO user_titles (user_id, title)
                            VALUES (?, ?)
                        ''', (user_id, title))

                    await db.execute('''
                        INSERT OR IGNORE INTO user_achievements (user_id, achievement_id, unlocked_at)
                        VALUES (?, ?, ?)
                    ''', (user_id, ach_id, datetime.now().isoformat()))
                    await db.commit()

                    await bot.send_message(
                        user_id,
                        f"üéâ {icon} *{ach_name}*\n{desc}\n{'+' if points >= 0 else ''}{points} –±–∞–ª–ª–æ–≤\n–¢–∏—Ç—É–ª: *{title}*",
                        parse_mode="Markdown"
                    )

# ============ –•–ï–ù–î–õ–ï–†–´ ============
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    name = message.from_user.first_name

    async with aiosqlite.connect('household.db') as db:
        await db.execute('INSERT OR IGNORE INTO users (user_id, name) VALUES (?, ?)', (user_id, name))
        await db.commit()

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {name}! üëã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FamilyScoreBot üèÜ\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá",
        reply_markup=get_main_menu(user_id)
    )

@dp.message(Command("myid"))
async def show_my_id(message: types.Message):
    await message.answer(f"–¢–≤–æ–π user_id: `{message.from_user.id}`", parse_mode="Markdown")

@dp.message(lambda message: message.text == "üìã –ú–æ–∏ –¥–µ–ª–∞")
async def handle_my_tasks(message: types.Message):
    async with aiosqlite.connect('household.db') as db:
        async with db.execute('SELECT id, name, points, is_team, category FROM tasks ORDER BY category, name') as cursor:
            tasks = await cursor.fetchall()

    if not tasks:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–ª. –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ /addtask")
        return

    current_category = ""
    for task_id, name, points, is_team, category in tasks:
        if category != current_category:
            current_category = category
            await message.answer(f"*{category}*", parse_mode="Markdown")

        suffix = " (–∫–æ–º–∞–Ω–¥–Ω–æ–µ)" if is_team else ""
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{task_id}"))
        await message.answer(f"üîπ {name} ‚Äî {points} –±–∞–ª–ª–æ–≤{suffix}", reply_markup=keyboard.as_markup())

@dp.callback_query(lambda c: c.data.startswith('done_'))
async def handle_task_done(callback_query: types.CallbackQuery):
    task_id = int(callback_query.data.split('_')[1])
    user_id = callback_query.from_user.id
    name = callback_query.from_user.first_name

    async with aiosqlite.connect('household.db') as db:
        async with db.execute('SELECT name, points, is_team, category FROM tasks WHERE id = ?', (task_id,)) as cursor:
            row = await cursor.fetchone()
            if not row:
                await callback_query.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return
            task_name, points, is_team, category = row

        today = datetime.now().strftime("%Y-%m-%d")
        async with db.execute('''
            SELECT 1 FROM completed_tasks 
            WHERE user_id = ? AND task_id = ? AND date(completed_at) = ?
        ''', (user_id, task_id, today)) as cursor:
            if await cursor.fetchone():
                await callback_query.answer("–¢—ã —É–∂–µ —Å–¥–µ–ª–∞–ª(–∞) —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è! üòä", show_alert=True)
                return

        if is_team:
            kb = InlineKeyboardBuilder()
            kb.add(InlineKeyboardButton(text="–û–¥–∏–Ω", callback_data=f"single_{task_id}"))
            kb.add(InlineKeyboardButton(text="–í–º–µ—Å—Ç–µ", callback_data=f"team_{task_id}"))
            await bot.send_message(
                callback_query.message.chat.id,
                "–¢—ã —Å–¥–µ–ª–∞–ª(–∞) —ç—Ç–æ –¥–µ–ª–æ –æ–¥–∏–Ω –∏–ª–∏ –≤–º–µ—Å—Ç–µ —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º?",
                reply_markup=kb.as_markup()
            )
            return

        await db.execute('UPDATE users SET score = score + ? WHERE user_id = ?', (points, user_id))
        await db.execute('INSERT INTO completed_tasks (user_id, task_id, completed_at, is_team) VALUES (?, ?, ?, ?)',
                         (user_id, task_id, datetime.now().isoformat(), 0))
        await db.commit()

        if "–ø–æ—Å—É–¥–æ–º–æ–µ—á–Ω" in task_name.lower():
            await record_daily_action(user_id, "dishwasher")
            await check_and_award_achievements(user_id, trigger="dishwasher_streak", data={"days": 1})
        if "–≤—ã–Ω–µ—Å—Ç–∏ –º—É—Å–æ—Ä" in task_name.lower():
            await record_daily_action(user_id, "trash")
            await check_and_award_achievements(user_id, trigger="trash_streak", data={"days": 1})
        if "–ø–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É" in task_name.lower():
            await record_daily_action(user_id, "dishes")
            await check_and_award_achievements(user_id, trigger="no_dishes", data={"days": 1})

        await update_level(user_id)
        await callback_query.answer(f"–û—Ç–ª–∏—á–Ω–æ! +{points} –±–∞–ª–ª–æ–≤ üéâ")
        await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, reply_markup=None)
        await bot.send_message(callback_query.message.chat.id, f"‚úÖ {name} –≤—ã–ø–æ–ª–Ω–∏–ª(–∞) –∑–∞–¥–∞—á—É –∏ –ø–æ–ª—É—á–∏–ª(–∞) {points} –±–∞–ª–ª–æ–≤!")

@dp.callback_query(lambda c: c.data.startswith('single_') or c.data.startswith('team_'))
async def handle_team_choice(callback_query: types.CallbackQuery):
    prefix, task_id_str = callback_query.data.split('_', 1)
    task_id = int(task_id_str)
    user_id = callback_query.from_user.id
    name = callback_query.from_user.first_name

    is_team = prefix == "team"

    async with aiosqlite.connect('household.db') as db:
        async with db.execute('SELECT name, points, category FROM tasks WHERE id = ?', (task_id,)) as cursor:
            row = await cursor.fetchone()
            if not row:
                return
            task_name, points, category = row

        await db.execute('UPDATE users SET score = score + ? WHERE user_id = ?', (points, user_id))
        await db.execute('INSERT INTO completed_tasks (user_id, task_id, completed_at, is_team) VALUES (?, ?, ?, ?)',
                         (user_id, task_id, datetime.now().isoformat(), int(is_team)))
        await db.commit()

        if "–ø–æ—Å—É–¥–æ–º–æ–µ—á–Ω" in task_name.lower():
            await record_daily_action(user_id, "dishwasher")
        if "–≤—ã–Ω–µ—Å—Ç–∏ –º—É—Å–æ—Ä" in task_name.lower():
            await record_daily_action(user_id, "trash")
        if "–ø–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É" in task_name.lower():
            await record_daily_action(user_id, "dishes")

        if is_team:
            partner_id = ADMINS[0] if user_id != ADMINS[0] else ADMINS[1] if len(ADMINS) > 1 else None
            if partner_id:
                await db.execute('UPDATE users SET score = score + ? WHERE user_id = ?', (points, partner_id))
                await db.execute('INSERT INTO completed_tasks (user_id, task_id, completed_at, is_team) VALUES (?, ?, ?, ?)',
                                 (partner_id, task_id, datetime.now().isoformat(), 1))
                await db.commit()
                try:
                    await bot.send_message(partner_id, f"üéâ {name} –æ—Ç–º–µ—Ç–∏–ª(–∞), —á—Ç–æ –≤—ã –≤–º–µ—Å—Ç–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ '{task_name}'! –¢–µ–±–µ —Ç–æ–∂–µ +{points} –±–∞–ª–ª–æ–≤!")
                except:
                    pass

        await update_level(user_id)
        if is_team and partner_id:
            await update_level(partner_id)

        await callback_query.answer(f"{'–í–º–µ—Å—Ç–µ' if is_team else '–û–¥–∏–Ω'} ‚Äî +{points} –±–∞–ª–ª–æ–≤!")
        await bot.send_message(callback_query.message.chat.id, f"‚úÖ {name} {'–≤–º–µ—Å—Ç–µ —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º ' if is_team else ''}–≤—ã–ø–æ–ª–Ω–∏–ª(–∞) '{task_name}'!")

@dp.message(lambda message: message.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥")
async def show_score(message: types.Message):
    async with aiosqlite.connect('household.db') as db:
        async with db.execute('''
            SELECT u.name, u.score, u.level, COALESCE(ut.title, "–ù–æ–≤–∏—á–æ–∫ –ë—ã—Ç–∞") as title
            FROM users u
            LEFT JOIN user_titles ut ON u.user_id = ut.user_id
            ORDER BY u.score DESC
        ''') as cursor:
            users = await cursor.fetchall()

    text = "üèÜ *–†–µ–π—Ç–∏–Ω–≥ —Å–µ–º–µ–π–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã:*\n\n"
    for i, (name, score, level, title) in enumerate(users, 1):
        medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "‚ñ´Ô∏è"
        text += f"{medal} {name}\n‚Äî –£—Ä–æ–≤–µ–Ω—å {level} | *{title}*\n‚Äî {score} –±–∞–ª–ª–æ–≤\n\n"

    await message.answer(text, parse_mode="Markdown")

@dp.message(lambda message: message.text == "üèÖ –ú–æ–∏ –∞—á–∏–≤–∫–∏")
async def show_achievements(message: types.Message):
    user_id = message.from_user.id
    async with aiosqlite.connect('household.db') as db:
        async with db.execute('''
            SELECT a.icon, a.name, a.description
            FROM user_achievements ua
            JOIN achievements a ON ua.achievement_id = a.id
            WHERE ua.user_id = ?
            ORDER BY ua.unlocked_at DESC
        ''', (user_id,)) as cursor:
            achievements = await cursor.fetchall()

    if not achievements:
        await message.answer("–¢—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–ª(–∞) –Ω–∏ –æ–¥–Ω–æ–π –∞—á–∏–≤–∫–∏ üòÖ\n–í—ã–ø–æ–ª–Ω—è–π –¥–µ–ª–∞ ‚Äî –∏ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è!")
        return

    text = "üèÖ *–¢–≤–æ–∏ –∞—á–∏–≤–∫–∏:*\n\n"
    for icon, name, desc in achievements:
        text += f"{icon} *{name}*\n‚Äî {desc}\n\n"
    await message.answer(text, parse_mode="Markdown")

@dp.message(Command("stats"))
async def show_stats(message: types.Message):
    user_id = message.from_user.id
    async with aiosqlite.connect('household.db') as db:
        async with db.execute('SELECT name FROM seasons WHERE is_active = 1') as cursor:
            row = await cursor.fetchone()
            current_season = row[0] if row else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        async with db.execute('SELECT score, level FROM users WHERE user_id = ?', (user_id,)) as cursor:
            row = await cursor.fetchone()
            current_score, current_level = row if row else (0, 1)

        async with db.execute('''
            SELECT SUM(final_score) FROM user_season_archive WHERE user_id = ?
        ''', (user_id,)) as cursor:
            total_score = (await cursor.fetchone())[0] or 0
        total_score += current_score

        year_ago = (datetime.now() - timedelta(days=365)).strftime("%Y-%m-%d")
        async with db.execute('''
            SELECT SUM(points) FROM completed_tasks_archive 
            WHERE user_id = ? AND completed_at >= ?
        ''', (user_id, year_ago)) as cursor:
            year_score = (await cursor.fetchone())[0] or 0

        async with db.execute('SELECT title FROM user_titles WHERE user_id = ?', (user_id,)) as cursor:
            row = await cursor.fetchone()
            current_title = row[0] if row else "–ù–æ–≤–∏—á–æ–∫ –ë—ã—Ç–∞"

    text = f"üìä *–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
    text += f"üìÖ –¢–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω: *{current_season}*\n"
    text += f"üèÜ –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {current_level}\n"
    text += f"üéñÔ∏è –¢–∏—Ç—É–ª: *{current_title}*\n"
    text += f"üìà –ë–∞–ª–ª–æ–≤ –≤ —Å–µ–∑–æ–Ω–µ: {current_score}\n\n"
    text += f"üìÜ –ó–∞ –≥–æ–¥: {year_score} –±–∞–ª–ª–æ–≤\n"
    text += f"üèÖ –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {total_score} –±–∞–ª–ª–æ–≤"

    await message.answer(text, parse_mode="Markdown")

@dp.message(Command("champions"))
async def show_champions(message: types.Message):
    async with aiosqlite.connect('household.db') as db:
        async with db.execute('SELECT id, name FROM seasons ORDER BY id DESC') as cursor:
            seasons = await cursor.fetchall()

        if not seasons:
            await message.answer("–ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤.")
            return

        text = "üèÜ *–ß–µ–º–ø–∏–æ–Ω—ã —Å–µ–∑–æ–Ω–æ–≤:*\n\n"

        for season_id, season_name in seasons:
            async with db.execute('''
                SELECT u.name, usa.final_score
                FROM user_season_archive usa
                JOIN users u ON usa.user_id = u.user_id
                WHERE usa.season_id = ?
                ORDER BY usa.final_score DESC
                LIMIT 1
            ''', (season_id,)) as cursor:
                row = await cursor.fetchone()
                if row:
                    champion, score = row
                    text += f"üèÖ {season_name}: *{champion}* ({score} –±–∞–ª–ª–æ–≤)\n"

        await message.answer(text, parse_mode="Markdown")

# ============ –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ============
@dp.message(lambda message: message.text == "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def handle_admin_panel(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer(
        "üõ† *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n"
        "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ª–∞–º–∏:*\n"
        "`/addtask \"–Ω–∞–∑–≤–∞–Ω–∏–µ\" –±–∞–ª–ª—ã [team] [\"–∫–∞—Ç–µ–≥–æ—Ä–∏—è\"]`\n"
        "`/edittask ID \"–Ω–∞–∑–≤–∞–Ω–∏–µ\" –±–∞–ª–ª—ã [team] [\"–∫–∞—Ç–µ–≥–æ—Ä–∏—è\"]`\n"
        "`/deletetask ID`\n\n"
        "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—á–∏–≤–∫–∞–º–∏:*\n"
        "`/addachiv \"–Ω–∞–∑–≤–∞–Ω–∏–µ\" \"–æ–ø–∏—Å–∞–Ω–∏–µ\" \"—ç–º–æ–¥–∑–∏\" –±–∞–ª–ª—ã \"—Ç–∏—Ç—É–ª\" \"—Ç–∏–ø\" [—Å–∫—Ä—ã—Ç–∞—è]`\n"
        "`/deleteachiv ID`\n"
        "`/listachiv`\n\n"
        "*–¶–µ–ª–∏:*\n"
        "`/setgoal \"–û–ø–∏—Å–∞–Ω–∏–µ\" –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`\n\n"
        "*–ü—Ä–∏–∑—ã:*\n"
        "`/prize @username –æ–ø–∏—Å–∞–Ω–∏–µ`",
        parse_mode="Markdown"
    )

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ª–∞–º–∏ ---
@dp.message(Command("addtask"))
async def add_task(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    text = message.text[9:].strip()
    args = []
    current = ""
    in_quotes = False
    for char in text:
        if char == '"' and (not current or current[-1] != '\\'):
            in_quotes = not in_quotes
        elif char == ' ' and not in_quotes:
            if current:
                args.append(current)
                current = ""
        else:
            current += char
    if current:
        args.append(current)

    if len(args) < 2:
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π: /addtask "–Ω–∞–∑–≤–∞–Ω–∏–µ" –±–∞–ª–ª—ã [team] ["–∫–∞—Ç–µ–≥–æ—Ä–∏—è"]')
        return

    name = args[0].strip('"')
    try:
        points = int(args[1])
    except:
        await message.answer("–ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return

    is_team = len(args) > 2 and args[2].lower() == "team"
    category = args[3].strip('"') if len(args) > 3 else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"

    async with aiosqlite.connect('household.db') as db:
        try:
            await db.execute('INSERT INTO tasks (name, points, is_team, category) VALUES (?, ?, ?, ?)', (name, points, int(is_team), category))
            await db.commit()
            await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {'–∫–æ–º–∞–Ω–¥–Ω–æ–µ' if is_team else '–ª–∏—á–Ω–æ–µ'} –¥–µ–ª–æ: '{name}' –∑–∞ {points} –±–∞–ª–ª–æ–≤ ({category})")
        except aiosqlite.IntegrityError:
            await message.answer("‚ùå –î–µ–ª–æ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

@dp.message(Command("edittask"))
async def edit_task(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    text = message.text[10:].strip()
    args = []
    current = ""
    in_quotes = False
    for char in text:
        if char == '"' and (not current or current[-1] != '\\'):
            in_quotes = not in_quotes
        elif char == ' ' and not in_quotes:
            if current:
                args.append(current)
                current = ""
        else:
            current += char
    if current:
        args.append(current)

    if len(args) < 3:
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π: /edittask ID "–Ω–∞–∑–≤–∞–Ω–∏–µ" –±–∞–ª–ª—ã [team] ["–∫–∞—Ç–µ–≥–æ—Ä–∏—è"]')
        return

    try:
        task_id = int(args[0])
        name = args[1].strip('"')
        points = int(args[2])
    except:
        await message.answer("ID –∏ –±–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!")
        return

    is_team = len(args) > 3 and args[3].lower() == "team"
    category = args[4].strip('"') if len(args) > 4 else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"

    async with aiosqlite.connect('household.db') as db:
        await db.execute('UPDATE tasks SET name = ?, points = ?, is_team = ?, category = ? WHERE id = ?', (name, points, int(is_team), category, task_id))
        if db.total_changes == 0:
            await message.answer("‚ùå –î–µ–ª–æ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            await db.commit()
            await message.answer(f"‚úÖ –î–µ–ª–æ ID {task_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

@dp.message(Command("deletetask"))
async def delete_task(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /deletetask <ID>")
        return

    try:
        task_id = int(args[1])
    except:
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return

    async with aiosqlite.connect('household.db') as db:
        await db.execute('DELETE FROM tasks WHERE id = ?', (task_id,))
        await db.commit()
        await message.answer(f"üóëÔ∏è –î–µ–ª–æ ID {task_id} —É–¥–∞–ª–µ–Ω–æ!")

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—á–∏–≤–∫–∞–º–∏ ---
@dp.message(Command("addachiv"))
async def add_achievement(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    text = message.text[10:].strip()
    args = []
    current = ""
    in_quotes = False
    for char in text:
        if char == '"' and (not current or current[-1] != '\\'):
            in_quotes = not in_quotes
        elif char == ' ' and not in_quotes:
            if current:
                args.append(current)
                current = ""
        else:
            current += char
    if current:
        args.append(current)

    if len(args) < 6:
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π: /addachiv "–Ω–∞–∑–≤–∞–Ω–∏–µ" "–æ–ø–∏—Å–∞–Ω–∏–µ" "—ç–º–æ–¥–∑–∏" –±–∞–ª–ª—ã "—Ç–∏—Ç—É–ª" "—Ç–∏–ø" [—Å–∫—Ä—ã—Ç–∞—è]')
        return

    name = args[0].strip('"')
    desc = args[1].strip('"')
    icon = args[2].strip('"')
    try:
        points = int(args[3])
    except:
        await message.answer("–ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    title = args[4].strip('"')
    ach_type = args[5].strip('"')
    is_hidden = len(args) > 6 and args[6].lower() == "true"

    async with aiosqlite.connect('household.db') as db:
        try:
            await db.execute('''
                INSERT INTO achievements (name, description, icon, points, title, type, is_hidden)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (name, desc, icon, points, title, ach_type, int(is_hidden)))
            await db.commit()
            await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞—á–∏–≤–∫–∞: '{name}' ({ach_type})")
        except aiosqlite.IntegrityError:
            await message.answer("‚ùå –ê—á–∏–≤–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

@dp.message(Command("deleteachiv"))
async def delete_achievement(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /deleteachiv <ID>")
        return

    try:
        ach_id = int(args[1])
    except:
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return

    async with aiosqlite.connect('household.db') as db:
        await db.execute('DELETE FROM achievements WHERE id = ?', (ach_id,))
        await db.commit()
        await message.answer(f"üóëÔ∏è –ê—á–∏–≤–∫–∞ ID {ach_id} —É–¥–∞–ª–µ–Ω–∞!")

@dp.message(Command("listachiv"))
async def list_achievements(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    async with aiosqlite.connect('household.db') as db:
        async with db.execute('SELECT id, name, type, points FROM achievements ORDER BY type, name') as cursor:
            achievements = await cursor.fetchall()

    if not achievements:
        await message.answer("–ù–µ—Ç –∞—á–∏–≤–æ–∫.")
        return

    categories = {
        "heroic": "ü¶∏‚Äç‚ôÇÔ∏è –ì–ï–†–û–ò–ß–ï–°–ö–ò–ï",
        "legendary": "üåü –õ–ï–ì–ï–ù–î–ê–†–ù–´–ï",
        "romantic": "üíò –†–û–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ï",
        "funny": "üé≤ –í–ï–°–Å–õ–´–ï",
        "boss": "üëë –ë–û–°–°-–ú–û–î–´",
        "shameful": "ü§° –ü–û–ó–û–†–ù–´–ï",
        "secret": "üïµÔ∏è‚Äç‚ôÇÔ∏è –°–ï–ö–†–ï–¢–ù–´–ï",
    }

    text = "üìã *–í—Å–µ –∞—á–∏–≤–∫–∏:*\n\n"
    current_type = ""

    for ach_id, name, ach_type, points in achievements:
        if ach_type != current_type:
            current_type = ach_type
            text += f"\n*{categories.get(ach_type, ach_type.upper())}*\n"
        sign = "+" if points >= 0 else ""
        text += f"ID {ach_id}: {name} ({sign}{points} –±–∞–ª–ª–æ–≤)\n"

    await message.answer(text, parse_mode="Markdown")

@dp.message(Command("setgoal"))
async def set_weekly_goal(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å —Ü–µ–ª–∏.")
        return

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π: /setgoal "–û–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏" –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        return

    desc = args[1].strip('"')
    try:
        target = int(args[2])
    except:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return

    async with aiosqlite.connect('household.db') as db:
        await db.execute('INSERT INTO weekly_goals (description, target_count, created_at) VALUES (?, ?, ?)',
                         (desc, target, datetime.now().isoformat()))
        await db.commit()

    await message.answer(f"üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ü–µ–ª—å –Ω–∞ –Ω–µ–¥–µ–ª—é:\n¬´{desc}¬ª ‚Äî –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å {target} –¥–µ–ª –≤–º–µ—Å—Ç–µ!")

@dp.message(Command("prize"))
async def award_prize(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å –ø—Ä–∏–∑—ã.")
        return

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /prize @username –æ–ø–∏—Å–∞–Ω–∏–µ_–ø—Ä–∏–∑–∞")
        return

    _, username, prize_desc = args
    target_username = username.lstrip('@')

    async with aiosqlite.connect('household.db') as db:
        async with db.execute('SELECT user_id FROM users WHERE name = ?', (target_username,)) as cursor:
            row = await cursor.fetchone()
            if not row:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞.")
                return
            target_id = row[0]

    try:
        await bot.send_message(
            target_id,
            f"üèÜ *–¢—ã –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–∑!*\n\n"
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–≥—Ä–∞–¥–∏–ª —Ç–µ–±—è –∑–∞ –æ—Ç–ª–∏—á–Ω—É—é —Ä–∞–±–æ—Ç—É:\n"
            f"üéÅ *{prize_desc}*\n\n"
            f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
            parse_mode="Markdown"
        )
        await message.answer(f"‚úÖ –ü—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{target_username}!")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–∑: {e}")

# ============ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ============
async def send_daily_reminders():
    async with aiosqlite.connect('household.db') as db:
        async with db.execute('SELECT user_id, name FROM users') as cursor:
            users = await cursor.fetchall()
        async with db.execute('SELECT name, points, category FROM tasks ORDER BY category, name') as cursor:
            tasks = await cursor.fetchall()

    if not users or not tasks:
        return

    categories = {}
    for name, points, category in tasks:
        if category not in categories:
            categories[category] = []
        categories[category].append(f"‚Ä¢ {name} (+{points} –±–∞–ª–ª–æ–≤)")

    for user_id, name in users:
        try:
            text = f"üëã –ü—Ä–∏–≤–µ—Ç, {name}!\n\n*–ù–µ –∑–∞–±—É–¥—å —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–ª–∞:*\n\n"
            for cat, items in categories.items():
                text += f"*{cat}*\n" + "\n".join(items) + "\n\n"
            text += "–ñ–º–∏ 'üìã –ú–æ–∏ –¥–µ–ª–∞', —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ!"
            await bot.send_message(user_id, text, parse_mode="Markdown", reply_markup=get_main_menu(user_id))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

async def send_weekly_report():
    report_chat_id = ADMINS[0]

    async with aiosqlite.connect('household.db') as db:
        week_ago = (datetime.now() - timedelta(days=7)).isoformat()

        async with db.execute('''
            SELECT u.name, COUNT(ct.id), SUM(t.points)
            FROM completed_tasks ct
            JOIN users u ON ct.user_id = u.user_id
            JOIN tasks t ON ct.task_id = t.id
            WHERE ct.completed_at > ?
            GROUP BY u.user_id
            ORDER BY SUM(t.points) DESC
        ''', (week_ago,)) as cursor:
            weekly_stats = await cursor.fetchall()

        async with db.execute('''
            SELECT description, target_count, created_at, achieved_at
            FROM weekly_goals
            ORDER BY id DESC LIMIT 1
        ''') as cursor:
            goal_row = await cursor.fetchone()

    text = "üìä *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç FamilyScoreBot*\n"
    text += f"üóìÔ∏è {datetime.now().strftime('%d.%m.%Y')}\n\n"

    if weekly_stats:
        text += "üéñÔ∏è *–†–µ–π—Ç–∏–Ω–≥ –Ω–µ–¥–µ–ª–∏:*\n"
        for i, (name, count, points) in enumerate(weekly_stats, 1):
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "‚ñ´Ô∏è"
            text += f"{medal} {name} ‚Äî {count} –¥–µ–ª, {points} –±–∞–ª–ª–æ–≤\n"

    if goal_row:
        desc, target, created, achieved = goal_row
        async with aiosqlite.connect('household.db') as db:
            async with db.execute('''
                SELECT COUNT(*) FROM completed_tasks WHERE completed_at > ?
            ''', (week_ago,)) as cursor:
                total_done = (await cursor.fetchone())[0]

        if not achieved and total_done >= target:
            text += f"\nüéØ *–¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê!* {desc}\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å–µ–º—å—é!"
            async with aiosqlite.connect('household.db') as db:
                await db.execute('UPDATE weekly_goals SET achieved_at = ? WHERE description = ?', (datetime.now().isoformat(), desc))
                await db.commit()
        else:
            text += f"\nüéØ *–¶–µ–ª—å –Ω–µ–¥–µ–ª–∏:* {desc}\nüìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {total_done}/{target}"

    text += "\n\n–û—Ç–¥—ã—Ö–∞–π—Ç–µ –∏ –≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –Ω–æ–≤–æ–π –Ω–µ–¥–µ–ª–µ! üí™"

    try:
        await bot.send_message(report_chat_id, text, parse_mode="Markdown")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞: {e}")

# ============ –ó–ê–ü–£–°–ö ============
async def main():
    await init_db()

    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_daily_reminders, CronTrigger(hour=19, minute=0))
    scheduler.add_job(send_weekly_report, CronTrigger(day_of_week='sun', hour=20, minute=0))
    scheduler.add_job(create_new_season, CronTrigger(day=1, hour=0, minute=0))
    scheduler.add_job(assign_random_quest, CronTrigger(day_of_week='mon,wed,fri', hour=10, minute=0))
    scheduler.add_job(send_daily_advice, CronTrigger(hour=12, minute=0))
    scheduler.start()

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
